{"version":3,"sources":["_common/services/lb-services.js","_common/_module.js","_common/helpers/route.helper.js","_common/helpers/modal.helper.js","_common/helpers/config.helper.js","_common/filters/numberfixedlen.js","_common/filters/fromnow.js","_common/filters/fileicon.js","_common/filters/bytes.js","_common/directives/ngprint.js","_common/directives/errsrc.js","_common/configs/permission.config.js","app.min.js","_common/configs/location.config.js","_common/configs/http.config.js","_common/configs/google-analytics.config.js","settings/_module.js","settings/overview/controller.js","participants/_module.js","participants/overview/controller.js","participants/form/controller.js","lotteries/_module.js","lotteries/overview/controller.js","lotteries/lottery/controller.js","lotteries/init/controller.js","auth/_module.js","auth/login/controller.js","_common/routes.js","settings/service.js","settings/routes.js","participants/service.js","participants/routes.js","participants/modals.js","lotteries/service.js","lotteries/routes.js","lotteries/modals.js","auth/service.js","auth/routes.js","auth/interceptor.js","auth/constants.js","app.js","run.js","bootstrap.js"],"names":["window","angular","undefined","urlBase","authHeader","module","factory","Resource","LoopBackAuth","$injector","R","id","prototype$__findById__accessTokens","params","fk","url","method","prototype$__destroyById__accessTokens","prototype$__updateById__accessTokens","prototype$__get__accessTokens","isArray","prototype$__create__accessTokens","prototype$__delete__accessTokens","prototype$__count__accessTokens","create","createMany","upsert","exists","findById","find","findOne","updateAll","deleteById","count","prototype$updateAttributes","createChangeStream","login","include","interceptor","response","accessToken","data","setUser","userId","user","rememberMe","config","save","resource","logout","clearUser","clearStorage","confirm","resetPassword","getCurrent","currentUserId","currentUserData","__isGetCurrentUser__","getCachedCurrent","isAuthenticated","this","getCurrentId","modelName","prototype$__get__plist","::findById::Plist::participants","::destroyById::Plist::participants","::updateById::Plist::participants","::get::Plist::participants","::create::Plist::participants","::createMany::Plist::participants","::delete::Plist::participants","::count::Plist::participants","plist","TargetResource","get","action","apply","arguments","prototype$__findById__participants","prototype$__destroyById__participants","prototype$__updateById__participants","prototype$__get__participants","prototype$__create__participants","prototype$__delete__participants","prototype$__count__participants","::get::Participant::plist","participants","destroyAll","destroyById","updateById","self","props","forEach","name","load","storage","value","key","propsPrefix","localStorage","sessionStorage","prototype","accessTokenId","userData","$httpProvider","interceptors","push","$q","request","substr","length","headers","res","body","error","status","reject","when","provider","setAuthHeader","header","setUrlBase","getUrlBase","$get","$resource","actions","$save","success","result","call","$promise","routerHelperProvider","$locationProvider","$stateProvider","$urlRouterProvider","RouterHelper","$state","configureStates","states","otherwisePath","state","controllerAs","extend","views","_","each","item","hasOtherwise","otherwise","getStates","service","$inject","modalHelperProvider","modalHelper","$uibModal","toaster","configureModals","modals","_ret","modal","obj","ModalResultComplete","ModalResultFailed","reason","resolve","ModalParams","open","then","configHelperProvider","ConfigHelper","notifyConfig","configName","message","console","log","numberFixedLen","a","b","slice","filter","fromNow","date","moment","fileicon","_icons","application/pdf","application/powerpoint","application/x-msword","application/x-msexcel","application/x-mspowerpoint","audio/x-mpeg-3","image/gif","image/png","image/tiff","image/jpeg","video/avi","video/mpeg","video/msvideo","video/quicktime","application/zip","bytes","precision","isNaN","parseFloat","isFinite","units","number","Math","floor","pow","toFixed","ngPrint","link","scope","element","attrs","on","elemToPrint","document","getElementById","printElementId","printElement","beforePrint","afterPrint","printSection","innerHTML","matchMedia","mediaQueryList","addListener","mql","matches","onbeforeprint","onafterprint","elem","domClone","cloneNode","appendChild","print","createElement","restrict","directive","errSrc","ngSrc","$set","bind","remove","src","PermissionsConfig","configHelper","Permission","AuthService","defineRole","AuthObj","run","LocationConfig","html5Mode","defaults","withCredentials","AnalyticsConfig","AnalyticsProvider","GoogleTrackCode","setAccount","trackUrlParams","ignoreFirstPageLoad","setPageEvent","SettingsController","SettingsService","activate","controller","ParticipantsController","ParticipantsService","ParticipantsModals","vm","LoadPLists","loading","GetPLists","PLists","AddPList","PListForm","ViewPList","PList","ID","_id","DeletePList","PListFormController","$modalInstance","GetPList","Participants","AddParticipants","i","RemoveParticipant","index","splice","Save","SavePList","close","LotteriesController","LotteriesService","LotteriesModals","LoadLotteries","HasPages","FetchPrevious","Previous","PreviousPage","FetchNext","Next","NextPage","GetLotteries","Lotteries","AddLottery","LotteryInit","go","DeleteLottery","lottery","LotteryController","$stateParams","LoadLottery","GetLottery","Lottery","LotteryInitController","SaveLottery","resp","Name","random","AuthLoginController","LoginMessages","User","ref","Alert","UNAUTHORIZED","SIGNOUT","REGISTERED","SignIn","credentials","rejection","toUpperCase","RoutesConfig","routerHelper","_states","map","_state","abstract","templateUrl","$scope","username","GetSettings","APP","Service","chain","rows","sortBy","DrewAt","reverse","GetSetting","SaveSetting","Setting","Type","DeleteSetting","_deleted","DeletedAt","Date","appRun","permissions","except","redirectTo","CreatedAt","Email","template","getModals","size","backdrop","_offset","_limit","_total","limit","skip","total_rows","shuffle","$http","$cookies","Init","getObject","isAuth","deferred","defer","post","CouchServer","password","IsSignIn","putObject","promise","SignOut","only","AuthInterceptor","responseError","AuthInterceptorConfig","constant","ANAUTHORIZED","Message","Details","AUTHERROR","UNAVAILABLE","$rootScope","$on","evt","to","preventDefault","_domain","location","hostname","split","shift","Project","Version","Domain","Database","ready","bootstrap"],"mappings":"CAAA,SAAAA,OAAAC,QAAAC,WAAA,YAEA,IAAAC,SAAA,OACAC,WAAA,gBAYAC,OAAAJ,QAAAI,OAAA,cAAA,cAmBAA,QAAAC,QACA,QACA,mBAAA,eAAA,YAAA,SAAAC,SAAAC,aAAAC,WACA,GAAAC,GAAAH,SACAJ,QAAA,cACAQ,GAAA,QAiCAC,oCACAC,QACAC,GAAA,OAEAC,IAAAZ,QAAA,8BACAa,OAAA,OA8BAC,uCACAJ,QACAC,GAAA,OAEAC,IAAAZ,QAAA,8BACAa,OAAA,UAqCAE,sCACAL,QACAC,GAAA,OAEAC,IAAAZ,QAAA,8BACAa,OAAA,OAiCAG,+BACAC,SAAA,EACAL,IAAAZ,QAAA,0BACAa,OAAA,OAmCAK,kCACAN,IAAAZ,QAAA,0BACAa,OAAA,QA4BAM,kCACAP,IAAAZ,QAAA,0BACAa,OAAA,UAgCAO,iCACAR,IAAAZ,QAAA,gCACAa,OAAA,OAoCAQ,QACAT,IAAAZ,QAAA,SACAa,OAAA,QAoCAS,YACAL,SAAA,EACAL,IAAAZ,QAAA,SACAa,OAAA,QAoCAU,QACAX,IAAAZ,QAAA,SACAa,OAAA,OA8BAW,QACAZ,IAAAZ,QAAA,oBACAa,OAAA,OAiCAY,UACAb,IAAAZ,QAAA,aACAa,OAAA,OA+BAa,MACAT,SAAA,EACAL,IAAAZ,QAAA,SACAa,OAAA,OA+BAc,SACAf,IAAAZ,QAAA,iBACAa,OAAA,OAgCAe,WACAhB,IAAAZ,QAAA,gBACAa,OAAA,QA+BAgB,YACAjB,IAAAZ,QAAA,aACAa,OAAA,UA8BAiB,OACAlB,IAAAZ,QAAA,eACAa,OAAA,OAmCAkB,4BACAnB,IAAAZ,QAAA,aACAa,OAAA,OAmCAmB,oBACApB,IAAAZ,QAAA,uBACAa,OAAA,QA0CAoB,OACAvB,QACAwB,QAAA,QAEAC,aACAC,SAAA,SAAAA,UACA,GAAAC,aAAAD,SAAAE,IAIA,OAHAjC,cAAAkC,QAAAF,YAAA7B,GAAA6B,YAAAG,OAAAH,YAAAI,MACApC,aAAAqC,WAAAN,SAAAO,OAAAjC,OAAAgC,cAAA,EACArC,aAAAuC,OACAR,SAAAS,WAGAjC,IAAAZ,QAAA,eACAa,OAAA,QAiCAiC,QACAX,aACAC,SAAA,SAAAA,UAGA,MAFA/B,cAAA0C,YACA1C,aAAA2C,eACAZ,SAAAS,WAGAjC,IAAAZ,QAAA,gBACAa,OAAA,QAgCAoC,SACArC,IAAAZ,QAAA,iBACAa,OAAA,OAiCAqC,eACAtC,IAAAZ,QAAA,eACAa,OAAA,QAuBAsC,YACAvC,IAAAZ,QAAA,aACAa,OAAA,MACAH,QACAF,GAAA,WACA,GAAAA,IAAAH,aAAA+C,aAEA,OADA,OAAA5C,KAAAA,GAAA,iBACAA,KAGA2B,aACAC,SAAA,SAAAA,UAEA,MADA/B,cAAAgD,gBAAAjB,SAAAE,KACAF,SAAAS,WAGAS,sBAAA,IA0LA,OAlJA/C,GAAA,eAAAA,EAAA,OA+BAA,EAAA,OAAAA,EAAA,UA8BAA,EAAA,YAAAA,EAAA,WA8BAA,EAAA,WAAAA,EAAA,WAiBAA,EAAAgD,iBAAA,WACA,GAAAjB,MAAAjC,aAAAgD,eACA,OAAAf,MAAA,GAAA/B,GAAA+B,MAAA,MAUA/B,EAAAiD,gBAAA,WACA,MAAA,OAAAC,KAAAC,gBAUAnD,EAAAmD,aAAA,WACA,MAAArD,cAAA+C,eAWA7C,EAAAoD,UAAA,OAGApD,KAoBAL,OAAAC,QACA,WACA,mBAAA,eAAA,YAAA,SAAAC,SAAAC,aAAAC,WACA,GAAAC,GAAAH,SACAJ,QAAA,kBACAQ,GAAA,QAoCAa,QACAT,IAAAZ,QAAA,aACAa,OAAA,QAoCAS,YACAL,SAAA,EACAL,IAAAZ,QAAA,aACAa,OAAA,QAoCAU,QACAX,IAAAZ,QAAA,aACAa,OAAA,OA8BAW,QACAZ,IAAAZ,QAAA,wBACAa,OAAA,OAiCAY,UACAb,IAAAZ,QAAA,iBACAa,OAAA,OA+BAa,MACAT,SAAA,EACAL,IAAAZ,QAAA,aACAa,OAAA,OA+BAc,SACAf,IAAAZ,QAAA,qBACAa,OAAA,OAgCAe,WACAhB,IAAAZ,QAAA,oBACAa,OAAA,QA+BAgB,YACAjB,IAAAZ,QAAA,iBACAa,OAAA,UA8BAiB,OACAlB,IAAAZ,QAAA,mBACAa,OAAA,OAmCAkB,4BACAnB,IAAAZ,QAAA,iBACAa,OAAA,OAmCAmB,oBACApB,IAAAZ,QAAA,2BACAa,OAAA,SAiJA,OAzGAN,GAAA,eAAAA,EAAA,OA+BAA,EAAA,OAAAA,EAAA,UA8BAA,EAAA,YAAAA,EAAA,WA8BAA,EAAA,WAAAA,EAAA,WAWAA,EAAAoD,UAAA,UAGApD,KAoBAL,OAAAC,QACA,eACA,mBAAA,eAAA,YAAA,SAAAC,SAAAC,aAAAC,WACA,GAAAC,GAAAH,SACAJ,QAAA,qBACAQ,GAAA,QAIAoD,wBACAhD,IAAAZ,QAAA,0BACAa,OAAA,OAoCAQ,QACAT,IAAAZ,QAAA,gBACAa,OAAA,QAoCAS,YACAL,SAAA,EACAL,IAAAZ,QAAA,gBACAa,OAAA,QAoCAU,QACAX,IAAAZ,QAAA,gBACAa,OAAA,OA8BAW,QACAZ,IAAAZ,QAAA,2BACAa,OAAA,OAiCAY,UACAb,IAAAZ,QAAA,oBACAa,OAAA,OA+BAa,MACAT,SAAA,EACAL,IAAAZ,QAAA,gBACAa,OAAA,OA+BAc,SACAf,IAAAZ,QAAA,wBACAa,OAAA,OAgCAe,WACAhB,IAAAZ,QAAA,uBACAa,OAAA,QA+BAgB,YACAjB,IAAAZ,QAAA,oBACAa,OAAA,UA8BAiB,OACAlB,IAAAZ,QAAA,sBACAa,OAAA,OAmCAkB,4BACAnB,IAAAZ,QAAA,oBACAa,OAAA,OAmCAmB,oBACApB,IAAAZ,QAAA,8BACAa,OAAA,QAIAgD,mCACAnD,QACAC,GAAA,OAEAC,IAAAZ,QAAA,+BACAa,OAAA,OAIAiD,sCACApD,QACAC,GAAA,OAEAC,IAAAZ,QAAA,+BACAa,OAAA,UAIAkD,qCACArD,QACAC,GAAA,OAEAC,IAAAZ,QAAA,+BACAa,OAAA,OAIAmD,8BACA/C,SAAA,EACAL,IAAAZ,QAAA,2BACAa,OAAA,OAIAoD,iCACArD,IAAAZ,QAAA,2BACAa,OAAA,QAIAqD,qCACAjD,SAAA,EACAL,IAAAZ,QAAA,2BACAa,OAAA,QAIAsD,iCACAvD,IAAAZ,QAAA,2BACAa,OAAA,UAIAuD,gCACAxD,IAAAZ,QAAA,iCACAa,OAAA,QAqLA,OA7IAN,GAAA,eAAAA,EAAA,OA+BAA,EAAA,OAAAA,EAAA,UA8BAA,EAAA,YAAAA,EAAA,WA8BAA,EAAA,WAAAA,EAAA,WAWAA,EAAAoD,UAAA,cAiCApD,EAAA8D,MAAA,WACA,GAAAC,gBAAAhE,UAAAiE,IAAA,SACAC,OAAAF,eAAA,4BACA,OAAAE,QAAAC,MAAAlE,EAAAmE,YAGAnE,KAoBAL,OAAAC,QACA,SACA,mBAAA,eAAA,YAAA,SAAAC,SAAAC,aAAAC,WACA,GAAAC,GAAAH,SACAJ,QAAA,eACAQ,GAAA,QAIAmE,oCACAjE,QACAC,GAAA,OAEAC,IAAAZ,QAAA,+BACAa,OAAA,OAIA+D,uCACAlE,QACAC,GAAA,OAEAC,IAAAZ,QAAA,+BACAa,OAAA,UAIAgE,sCACAnE,QACAC,GAAA,OAEAC,IAAAZ,QAAA,+BACAa,OAAA,OAIAiE,+BACA7D,SAAA,EACAL,IAAAZ,QAAA,2BACAa,OAAA,OAIAkE,kCACAnE,IAAAZ,QAAA,2BACAa,OAAA,QAIAmE,kCACApE,IAAAZ,QAAA,2BACAa,OAAA,UAIAoE,iCACArE,IAAAZ,QAAA,iCACAa,OAAA,OAoCAQ,QACAT,IAAAZ,QAAA,UACAa,OAAA,QAoCAS,YACAL,SAAA,EACAL,IAAAZ,QAAA,UACAa,OAAA,QAoCAU,QACAX,IAAAZ,QAAA,UACAa,OAAA,OA8BAW,QACAZ,IAAAZ,QAAA,qBACAa,OAAA,OAiCAY,UACAb,IAAAZ,QAAA,cACAa,OAAA,OA+BAa,MACAT,SAAA,EACAL,IAAAZ,QAAA,UACAa,OAAA,OA+BAc,SACAf,IAAAZ,QAAA,kBACAa,OAAA,OAgCAe,WACAhB,IAAAZ,QAAA,iBACAa,OAAA,QA+BAgB,YACAjB,IAAAZ,QAAA,cACAa,OAAA,UA8BAiB,OACAlB,IAAAZ,QAAA,gBACAa,OAAA,OAmCAkB,4BACAnB,IAAAZ,QAAA,cACAa,OAAA,OAmCAmB,oBACApB,IAAAZ,QAAA,wBACAa,OAAA,QAIAqE,6BACAtE,IAAAZ,QAAA,0BACAa,OAAA,QA8bA,OAtZAN,GAAA,eAAAA,EAAA,OA+BAA,EAAA,OAAAA,EAAA,UA8BAA,EAAA,YAAAA,EAAA,WA8BAA,EAAA,WAAAA,EAAA,WAWAA,EAAAoD,UAAA,QA+CApD,EAAA4E,aAAA,WACA,GAAAb,gBAAAhE,UAAAiE,IAAA,eACAC,OAAAF,eAAA,6BACA,OAAAE,QAAAC,MAAAlE,EAAAmE,YAgCAnE,EAAA4E,aAAArD,MAAA,WACA,GAAAwC,gBAAAhE,UAAAiE,IAAA,eACAC,OAAAF,eAAA,+BACA,OAAAE,QAAAC,MAAAlE,EAAAmE,YAmCAnE,EAAA4E,aAAA9D,OAAA,WACA,GAAAiD,gBAAAhE,UAAAiE,IAAA,eACAC,OAAAF,eAAA,gCACA,OAAAE,QAAAC,MAAAlE,EAAAmE,YAmCAnE,EAAA4E,aAAA7D,WAAA,WACA,GAAAgD,gBAAAhE,UAAAiE,IAAA,eACAC,OAAAF,eAAA,oCACA,OAAAE,QAAAC,MAAAlE,EAAAmE,YA4BAnE,EAAA4E,aAAAC,WAAA,WACA,GAAAd,gBAAAhE,UAAAiE,IAAA,eACAC,OAAAF,eAAA,gCACA,OAAAE,QAAAC,MAAAlE,EAAAmE,YA8BAnE,EAAA4E,aAAAE,YAAA,WACA,GAAAf,gBAAAhE,UAAAiE,IAAA,eACAC,OAAAF,eAAA,qCACA,OAAAE,QAAAC,MAAAlE,EAAAmE,YAiCAnE,EAAA4E,aAAA1D,SAAA,WACA,GAAA6C,gBAAAhE,UAAAiE,IAAA,eACAC,OAAAF,eAAA,kCACA,OAAAE,QAAAC,MAAAlE,EAAAmE,YAqCAnE,EAAA4E,aAAAG,WAAA,WACA,GAAAhB,gBAAAhE,UAAAiE,IAAA,eACAC,OAAAF,eAAA,oCACA,OAAAE,QAAAC,MAAAlE,EAAAmE,YAGAnE,KAIAL,OACAC,QAAA,eAAA,WAIA,QAAAE,gBACA,GAAAkF,MAAA9B,IACA+B,OAAAC,QAAA,SAAAC,MACAH,KAAAG,MAAAC,KAAAD,QAEAjC,KAAAf,WAAA3C,UACA0D,KAAAJ,gBAAA,KAkCA,QAAAT,MAAAgD,QAAAF,KAAAG,OACA,GAAAC,KAAAC,YAAAL,IACA,OAAAG,QAAAA,MAAA,IACAD,QAAAE,KAAAD,MAGA,QAAAF,MAAAD,MACA,GAAAI,KAAAC,YAAAL,IACA,OAAAM,cAAAF,MAAAG,eAAAH,MAAA,KAnDA,GAAAN,QAAA,gBAAA,iBACAO,YAAA,YAsCA,OA3BA1F,cAAA6F,UAAAtD,KAAA,WACA,GAAA2C,MAAA9B,KACAmC,QAAAnC,KAAAf,WAAAsD,aAAAC,cACAT,OAAAC,QAAA,SAAAC,MACA9C,KAAAgD,QAAAF,KAAAH,KAAAG,UAIArF,aAAA6F,UAAA3D,QAAA,SAAA4D,cAAA3D,OAAA4D,UACA3C,KAAA0C,cAAAA,cACA1C,KAAAL,cAAAZ,OACAiB,KAAAJ,gBAAA+C,UAGA/F,aAAA6F,UAAAnD,UAAA,WACAU,KAAA0C,cAAA,KACA1C,KAAAL,cAAA,KACAK,KAAAJ,gBAAA,MAGAhD,aAAA6F,UAAAlD,aAAA,WACAwC,MAAAC,QAAA,SAAAC,MACA9C,KAAAqD,eAAAP,KAAA,MACA9C,KAAAoD,aAAAN,KAAA,SAIA,GAAArF,gBAeAsC,QAAA,gBAAA,SAAA0D,eACAA,cAAAC,aAAAC,KAAA,qCAEApG,QAAA,kCAAA,KAAA,eACA,SAAAqG,GAAAnG,cACA,OACAoG,QAAA,SAAA9D,QAGA,GAAAA,OAAA/B,IAAA8F,OAAA,EAAA1G,QAAA2G,UAAA3G,QACA,MAAA2C,OAGA,IAAAtC,aAAA8F,cACAxD,OAAAiE,QAAA3G,YAAAI,aAAA8F,kBACA,IAAAxD,OAAAW,qBAAA,CAGA,GAAAuD,MACAC,MAAAC,OAAAC,OAAA,MACAA,OAAA,IACArE,OAAAA,OACAiE,QAAA,WAAA,MAAA7G,YAEA,OAAAyG,IAAAS,OAAAJ,KAEA,MAAAlE,SAAA6D,GAAAU,KAAAvE,aAyBAwE,SAAA,mBAAA,WAWA1D,KAAA2D,cAAA,SAAAC,QACApH,WAAAoH,QAYA5D,KAAA6D,WAAA,SAAA1G,KACAZ,QAAAY,KAWA6C,KAAA8D,WAAA,WACA,MAAAvH,UAGAyD,KAAA+D,MAAA,YAAA,SAAAC,WACA,MAAA,UAAA7G,IAAAF,OAAAgH,SACA,GAAA7E,UAAA4E,UAAA7G,IAAAF,OAAAgH,QAWA,OANA7E,UAAAqD,UAAAyB,MAAA,SAAAC,QAAAb,OAGA,GAAAc,QAAAhF,SAAAtB,OAAAuG,KAAArE,QAAAA,KAAAmE,QAAAb,MACA,OAAAc,QAAAE,UAAAF,QAEAhF,eAKAhD,OAAAA,OAAAC,SCt7GA,WACA,YAEAA,SACAI,OAAA,eACA,aACA,2BACA,aACA,aACA,YACA,aACA,UACA,eACA,iBCZA,WACA,YAQA,SAAA8H,sBAAAC,kBAAAC,eAAAC,oBAQA,QAAAC,cAAAC,QAUA,QAAAC,iBAAAC,OAAAC,eACAD,OAAA9C,QAAA,SAAAgD,OAEA,GAAA9F,SACA+F,aAAA,KAGA5I,SAAA6I,OAAAhG,OAAA8F,MAAA9F,QAEAA,OAAAiG,OACAC,EAAAC,KAAAnG,OAAAiG,MAAA,SAAAG,MACAA,KAAAL,aAAA,OAIAR,eAAAO,MAAAA,MAAAA,MAAA9F,UAEA6F,gBAAAQ,eACAA,cAAA,EACAb,mBAAAc,UAAAT,gBAIA,QAAAU,aACA,MAAAb,QAAA9D,MAjCA,GAAAyE,eAAA,EAEAG,SACAb,gBAAAA,gBACAY,UAAAA,UAGA,OAAAC,SAdA1F,KAAA+D,KAAAY,aAIAA,aAAAgB,SAAA,UAZAtJ,QACAI,OAAA,eACAiH,SAAA,eAAAa,sBAEAA,qBAAAoB,SAAA,oBAAA,iBAAA,yBCPA,WACA,YAQA,SAAAC,uBAMA,QAAAC,aAAAC,UAAA/C,GAAAgD,SAQA,QAAAC,iBAAAC,QACA,GAAAC,QA8BA,OA7BA7J,SAAA2F,QAAAiE,OAAA,SAAAE,OACAD,KAAAC,MAAAA,OAAA,SAAAC,KAiBA,QAAAC,qBAAA1H,UACA,MAAAA,UAGA,QAAA2H,mBAAAC,QACA,MAAAA,SAAA,mBAAAA,OACAxD,GAAAS,SADA,OArBA,GAAAtE,SACA+F,aAAA,KACAuB,SACAC,YAAA,WACA,MAAAL,WAMA,OAFA/J,SAAA6I,OAAAhG,OAAAiH,MAAAjH,QAEA4G,UACAY,KAAAxH,QACAkF,OACAuC,KAAAN,qBAHAP,SAIAQ,sBAaAJ,KArCA,GAAAR,UACAM,gBAAAA,gBAGA,OAAAN,SAVA1F,KAAA+D,KAAA8B,YAEAA,YAAAF,SAAA,YAAA,KAAA,WAVAtJ,QACAI,OAAA,eACAiH,SAAA,cAAAkC,qBAEAA,oBAAAD,cCPA,WACA,YAQA,SAAAiB,wBAQA,QAAAC,gBASA,QAAAC,cAAAC,WAAAC,SACAA,QAAAA,YACAC,QAAAC,IAAA,eAAAH,WAAA,IAAA,mCAAAC,SATA,GAAAtB,UACAoB,aAAAA,aAGA,OAAApB,SAZA1F,KAAA+D,KAAA8C,aAIAA,aAAAlB,WAZAtJ,QACAI,OAAA,eACAiH,SAAA,eAAAkD,sBAEAA,qBAAAjB,cCPA,WACA,YAQA,SAAAwB,kBACA,MAAA,UAAAC,EAAAC,GACA,OAAA,IAAAD,EAAA,IAAAE,OAAAD,IARAhL,QACAI,OAAA,eACA8K,OAAA,iBAAAJ,gBAEAA,eAAAxB,cCPA,WACA,YAQA,SAAA6B,WACA,MAAA,UAAAC,MACA,MAAAC,QAAAD,MAAAD,WARAnL,QACAI,OAAA,eACA8K,OAAA,UAAAC,SAEAA,QAAA7B,cCPA,WACA,YAQA,SAAAgC,YACA,GAAAC,SACAC,kBAAA,gBACAC,yBAAA,uBACAC,uBAAA,iBACAC,wBAAA,kBACAC,6BAAA,uBACAC,iBAAA,kBACAC,YAAA,kBACAC,YAAA,kBACAC,aAAA,kBACAC,aAAA,kBACAC,YAAA,kBACAC,aAAA,kBACAC,gBAAA,kBACAC,kBAAA,kBACAC,kBAAA,gBAEA,OAAA,UAAAvB,GACA,MAAAQ,QAAAR,IAAA,aAzBA/K,QACAI,OAAA,eACA8K,OAAA,WAAAI,UAEAA,SAAAhC,cCPA,WACA,YAQA,SAAAiD,SACA,MAAA,UAAAA,MAAAC,WACA,GAAAC,MAAAC,WAAAH,UAAAI,SAAAJ,OAAA,MAAA,GACA,oBAAAC,aAAAA,UAAA,EACA,IAAAI,QAAA,QAAA,KAAA,KAAA,KAAA,KAAA,MACAC,OAAAC,KAAAC,MAAAD,KAAAjC,IAAA0B,OAAAO,KAAAjC,IAAA,MACA,QAAA0B,MAAAO,KAAAE,IAAA,KAAAF,KAAAC,MAAAF,UAAAI,QAAAT,WAAA,IAAAI,MAAAC,SAZA7M,QACAI,OAAA,eACA8K,OAAA,QAAAqB,OAEAA,MAAAjD,cCPA,WACA,YAQA,SAAA4D,WASA,QAAAC,MAAAC,MAAAC,QAAAC,OAEAD,QAAAE,GAAA,QAAA,WACA,GAAAC,aAAAC,SAAAC,eAAAJ,MAAAK,eACAH,cACAI,aAAAJ,cAIA,IAAAK,aAAA,WACAjD,QAAAC,IAAA,0CAEAiD,WAAA,WACAlD,QAAAC,IAAA,uCACAkD,aAAAC,UAAA,GAGA,IAAAjO,OAAAkO,WAAA,CACA,GAAAC,gBAAAnO,OAAAkO,WAAA,QACAC,gBAAAC,YAAA,SAAAC,KACAA,IAAAC,QACAR,cAEAC,eAKA/N,OAAAuO,cAAAT,YACA9N,OAAAwO,aAAAT,WAIA,QAAAF,cAAAY,MAEA,GAAAC,UAAAD,KAAAE,WAAA,EACAX,cAAAY,YAAAF,UACA1O,OAAA6O,QA7CA,GAAAb,cAAAN,SAAAC,eAAA,eA+CA,OA7CAK,gBACAA,aAAAN,SAAAoB,cAAA,OACAd,aAAArN,GAAA,eACA+M,SAAAzG,KAAA2H,YAAAZ,gBA2CAZ,KAAAA,KACA2B,SAAA,KAxDA9O,QACAI,OAAA,eACA2O,UAAA,UAAA7B,SAEAA,QAAA5D,cCPA,WACA,YAQA,SAAA0F,UACA,OACA7B,KAAA,SAAAC,MAAAC,QAAAC,OACAA,MAAA2B,OACA3B,MAAA4B,KAAA,MAAA5B,MAAA0B,QAGA3B,QAAA8B,KAAA,QAAA,WAEA,MAAA,UAAA7B,MAAA0B,WACA3B,SAAA+B,cAGA9B,MAAA+B,KAAA/B,MAAA0B,QACA1B,MAAA4B,KAAA,MAAA5B,MAAA0B,aApBAhP,QACAI,OAAA,eACA2O,UAAA,SAAAC,QAEAA,OAAA1F,cCPA,WACA,YAOA,SAAAgG,mBAAAC,aAAAC,WAAAC,aAEAD,WAAAE,WAAA,YAAA,WACA,OAAAD,YAAAE,UAGAJ,aAAA9E,aAAA,cAAA,UAXAzK,QACAI,OAAA,eACAwP,IAAAN,mBCsyHEA,kBAAkBhG,SAAW,eAAgB,aAAc,kBC3yH7D,WACA,YAOA,SAAAuG,gBAAAtF,qBAAApC,mBACAA,kBAAA2H,WAAA,GAEAvF,qBAAA7C,OAAA+C,aAAA,kBAAA,GARAzK,QACAI,OAAA,eACAyC,OAAAgN,gBDuzHEA,eAAevG,SAAW,uBAAwB,wBE5zHpD,WACA,YAOA,SAAAuG,gBAAAtJ,eACAA,cAAAwJ,SAAAC,iBAAA,EANAhQ,QACAI,OAAA,eACAyC,OAAAgN,gBFs0HEA,eAAevG,SAAW,oBG30H5B,WACA,YAOA,SAAA2G,iBAAA1F,qBAAA2F,mBAEA,GAAAC,iBAAA,eAEAD,mBAAAE,WAAAD,iBAEAD,kBAAAG,gBAAA,GACAH,kBAAAI,qBAAA,GACAJ,kBAAAK,aAAA,uBAEAhG,qBAAA7C,OAAA+C,aAAA,mBAAA0F,iBAfAnQ,QACAI,OAAA,eACAyC,OAAAoN,iBH+1HEA,gBAAgB3G,SAAW,uBAAwB,wBIr2HrD,WACA,YAEAtJ,SACAI,OAAA,sBCJA,WACA,YAOA,SAAAoQ,oBAAAC,gBAAA/G,SAKA,QAAAgH,aAFAA,WARA1Q,QACAI,OAAA,gBACAuQ,WAAA,qBAAAH,oBL23HEA,mBAAmBlH,SAAW,kBAAmB,cMh4HnD,WACA,YAEAtJ,SACAI,OAAA,0BCJA,WACA,YAOA,SAAAwQ,wBAAAC,oBAAAC,mBAAApH,QAAAnB,QAUA,QAAAmI,YACAK,GAAAC,aAGA,QAAAA,cACAD,GAAAE,SAAA,EACAJ,oBACAK,YACA5G,KAAA,SAAA9H,MACAuO,GAAAI,OAAA3O,OAHAqO,WAKA,WACAE,GAAAE,SAAA,IAIA,QAAAG,YACAN,mBACAO,YACA/G,KAAA,WACAyG,GAAAC,eAIA,QAAAM,WAAAC,OACAT,mBACAO,WACAG,GAAAD,MAAAE,MAEAnH,KAAA,WACAyG,GAAAC,eAIA,QAAAU,aAAAH,OACAV,oBACAa,YAAAH,OACAjH,KAAA,WACAyG,GAAAC,eA/CA,GAAAD,IAAApN,IAEAoN,IAAAK,SAAAA,SACAL,GAAAO,UAAAA,UACAP,GAAAW,YAAAA,YACAX,GAAAC,WAAAA,WAEAN,WAbA1Q,QACAI,OAAA,oBACAuQ,WAAA,yBAAAC,wBPg8HEA,uBAAuBtH,SAAW,sBAAuB,qBAAsB,UAAW,aQr8H5F,WACA,YAOA,SAAAqI,qBAAAC,eAAAxH,YAAAyG,qBAaA,QAAAH,YACAtG,YAAAoH,IACAT,GAAAE,SAAA,EACAJ,oBACAgB,SAAAzH,YAAAoH,IACAlH,KAAA,SAAA9H,MACAuO,GAAAQ,MAAA/O,KACA,IAAAuO,GAAAQ,MAAAO,aAAAjL,QACAkK,GAAAgB,oBALAlB,WAQA,WACAE,GAAAE,SAAA,KAGAF,GAAAgB,kBAIA,QAAAA,mBACA,IAAA,GAAAC,GAAA,EAAA,EAAAA,EAAAA,IACAjB,GAAAQ,MAAAO,aAAArL,SAIA,QAAAwL,mBAAAC,OACAnB,GAAAQ,MAAAO,aAAAK,OAAAD,MAAA,GAGA,QAAAE,QACAvB,oBACAwB,UAAAtB,GAAAQ,OACAjH,KAAA,WACAsH,eAAAU,UA7CA,GAAAvB,IAAApN,IAEAoN,IAAAQ,OACAO,iBAGAf,GAAAgB,gBAAAA,gBACAhB,GAAAkB,kBAAAA,kBACAlB,GAAAqB,KAAAA,KAEA1B,WAhBA1Q,QACAI,OAAA,oBACAuQ,WAAA,sBAAAgB,qBR8/HEA,oBAAoBrI,SAAW,iBAAkB,cAAe,0BSngIlE,WACA,YAEAtJ,SACAI,OAAA,uBCJA,WACA,YAOA,SAAAmS,qBAAAC,iBAAAC,gBAAA/I,QAAAnB,QAWA,QAAAmI,YACAK,GAAA2B,gBACApI,KAAA,WACAyG,GAAA4B,SAAAH,iBAAAG,aAIA,QAAAC,iBACA7B,GAAA4B,SAAAE,WACAL,iBAAAM,eACA/B,GAAA4B,SAAAH,iBAAAG,WACA5B,GAAA2B,iBAIA,QAAAK,aACAhC,GAAA4B,SAAAK,OACAR,iBAAAS,WACAlC,GAAA4B,SAAAH,iBAAAG,WACA5B,GAAA2B,iBAIA,QAAAA,iBAEA,MADA3B,IAAAE,SAAA,EACAuB,iBACAU,eACA5I,KAAA,SAAA9H,MACAuO,GAAAoC,UAAA3Q,OAHAgQ,WAKA,WACAzB,GAAAE,SAAA,IAIA,QAAAmC,cACAX,gBACAY,cACA/I,KAAA,SAAA5J,IACAA,IACA6H,OAAA+K,GAAA,yBACA9B,GAAA9Q,OAMA,QAAA6S,eAAAC,SACAhB,iBACAe,cAAAC,SACAlJ,KAAA,WACAyG,GAAA2B,kBA7DA,GAAA3B,IAAApN,IAEAoN,IAAAqC,WAAAA,WACArC,GAAAwC,cAAAA,cACAxC,GAAA2B,cAAAA,cACA3B,GAAA6B,cAAAA,cACA7B,GAAAgC,UAAAA,UAEArC,WAdA1Q,QACAI,OAAA,iBACAuQ,WAAA,sBAAA4B,qBVklIEA,oBAAoBjJ,SAAW,mBAAoB,kBAAmB,UAAW,aWvlInF,WACA,YAOA,SAAAmK,mBAAAjB,iBAAAkB,aAAAhK,SAOA,QAAAgH,YACAK,GAAA4C,cAGA,QAAAA,eACA5C,GAAAE,SAAA,EACAuB,iBACAoB,WAAAF,aAAAlC,IACAlH,KAAA,SAAA9H,MACAuO,GAAA8C,QAAArR,OAHAgQ,WAKA,WACAzB,GAAAE,SAAA,IAlBA,GAAAF,IAAApN,IAEAoN,IAAA4C,YAAAA,YAEAjD,WAVA1Q,QACAI,OAAA,iBACAuQ,WAAA,oBAAA8C,mBXonIEA,kBAAkBnK,SAAW,mBAAoB,eAAgB,cYznInE,WACA,YAOA,SAAAwK,uBAAAlC,eAAAxH,YAAAoI,iBAAA3B,qBAYA,QAAAH,YACAK,GAAAC,aAGA,QAAAA,cACAD,GAAAE,SAAA,EACAJ,oBACAK,YACA5G,KAAA,SAAA9H,MACAuO,GAAAI,OAAA3O,OAHAqO,WAKA,WACAE,GAAAE,SAAA,IAIA,QAAAmB,QACAI,iBACAuB,YAAAhD,GAAA8C,SACAvJ,KAAA,SAAA0J,MACApC,eAAAU,MAAA0B,KAAAtT,MA/BA,GAAAqQ,IAAApN,IAEAoN,IAAA8C,SACAI,KAAA,YAAAnH,KAAAC,MAAA,MAAAD,KAAAoH,SAAA,MAGAnD,GAAAC,WAAAA,WACAD,GAAAqB,KAAAA,KAEA1B,WAfA1Q,QACAI,OAAA,iBACAuQ,WAAA,wBAAAmD,uBZoqIEA,sBAAsBxK,SAAW,iBAAkB,cAAe,mBAAoB,0BaxqIxF,WACA,YAEAtJ,SACAI,OAAA,kBCLA,WACA,YAOA,SAAA+T,qBAAA1E,YAAAiE,aAAAnL,OAAA6L,cAAAC,MAQA,QAAA3D,YAEA,OAAAgD,aAAAY,KACA,IAAA,KACAvD,GAAAwD,MAAAH,cAAAI,YACA,MACA,KAAA,KACAzD,GAAAwD,MAAAH,cAAAK,OACA,MACA,KAAA,KACA1D,GAAAwD,MAAAH,cAAAM,YAQA,QAAAC,UAEA5D,GAAAE,SAAA,EACAF,GAAAwD,OAAA,EAEAF,KACAlS,MAAA4O,GAAA6D,aACA3M,SACAqC,KAAA,SAAAhI,UACAiG,OAAA+K,GAAA,2BACA,SAAAuB,WACAjK,QAAAC,IAAA,YAAAgK,WACA9D,GAAAwD,MAAAH,cAAAS,UAAA5N,MAAA6N,iBAPAT,WASA,WACAtD,GAAAE,SAAA,IAxCA,GAAAF,IAAApN,IAEAoN,IAAAE,SAAA,EACAF,GAAA4D,OAAAA,OAEAjE,WAXA1Q,QACAI,OAAA,YACAuQ,WAAA,sBAAAwD,qBdgvIEA,oBAAoB7K,SAAW,cAAe,eAAgB,SAAU,gBAAiB,WepvI3F,WACA,YAQA,SAAAyL,cAAAxF,aAAAyF,cAEA,GAAAC,SAAA7L,WACA4L,cAAAxM,gBAAAyM,QAAA,KAEA1F,aAAA9E,aAAA,eAAA1B,EAAAmM,IAAAD,QAAA,SAAAE,QACA,MAAAA,QAAAxM,SAKA,QAAAS,aACA,QACAT,MAAA,MACA9F,QACAuS,YAAA,EACAC,YAAA,gCACA1E,WAAA,SAAA2E,OAAA7F,aACA6F,OAAAC,SAAA9F,YAAAE,QAAA4F,aAxBAvV,QACAI,OAAA,eACAwP,IAAAmF,cAEAA,aAAAzL,SAAA,eAAA,mBCPA,WACA,YAOA,SAAAmH,iBAAA9I,WAWA,QAAA6N,aAAA5U,QACA,MAAA+G,WAAA8N,IAAAC,QAAA,iCACAjR,MACAwD,SACAqC,KAAA,SAAA9H,MACA,MAAAuG,GAAA4M,MAAAnT,KAAAoT,MACAV,IAAA,SAAAjM,MACA,MAAAA,MAAAlD,QAEA8P,OAAA,SAAA5M,MACA,MAAAA,MAAA6M,QAAA,IAEAC,UACAhQ,UAIA,QAAAiQ,YAAAtV,IACA,MAAAiH,WAAA8N,IAAAC,QAAAhV,IACA+D,MACAwD,SACAqC,KAAA,SAAA9H,MACA,MAAAA,QAIA,QAAAyT,aAAAC,SAEA,MADAA,SAAAC,KAAA,UACAxO,UAAA8N,IAAAC,SACA5S,KAAAoT,SACAjO,SACAqC,KAAA,SAAA9H,MACA,MAAAA,QAIA,QAAA4T,eAAAF,SAKA,MAHAA,SAAAG,UAAA,EACAH,QAAAI,UAAA,GAAAC,MAEA5O,UAAA8N,IAAAC,SACA5S,KAAAoT,SACAjO,SApDA,GAAAoB,UACAmM,YAAAA,YACAQ,WAAAA,WACAC,YAAAA,YACAG,cAAAA,cAGA,OAAA/M,SAdArJ,QACAI,OAAA,gBACAC,QAAA,kBAAAoQ,iBhBw1IEA,gBAAgBnH,SAAW,gBiB91I7B,WACA,YAQA,SAAAkN,QAAAxB,cACAA,aAAAxM,gBAAAY,aAGA,QAAAA,aACA,QACAT,MAAA,eACA9F,QACA/B,IAAA,YACA6P,WAAA,qBACA0E,YAAA,kCACA7S,MACAiU,aACAC,QAAA,aACAC,WAAA,kBApBA3W,QACAI,OAAA,gBACAwP,IAAA4G,QAEAA,OAAAlN,SAAA,mBCNA,WACA,YAOA,SAAAuH,qBAAAlJ,WAWA,QAAAuJ,WAAAtQ,QACA,MAAA+G,WAAA8N,IAAAC,QAAA,+BACAjR,MACAwD,SACAqC,KAAA,SAAA9H,MACA,MAAAuG,GAAA4M,MAAAnT,KAAAoT,MACAV,IAAA,SAAAjM,MACA,MAAAA,MAAAlD,QAEA8P,OAAA,SAAA5M,MACA,MAAAA,MAAAgL,OAEA8B,UACAhQ,UAIA,QAAA8L,UAAAnR,IACA,MAAAiH,WAAA8N,IAAAC,QAAAhV,IACA+D,MACAwD,SACAqC,KAAA,SAAA9H,MACA,MAAAA,QAKA,QAAA6P,WAAAd,OAWA,MATAA,OAAAE,MACAF,MAAA4E,KAAA,QACA5E,MAAAqF,UAAA,GAAAL,OAGAhF,MAAAO,aAAA/I,EAAAmC,OAAAqG,MAAAO,aAAA,SAAA7I,MACA,MAAAA,MAAAgL,MAAAhL,KAAA4N,QAGAlP,UAAA8N,IAAAC,SACA5S,KAAAyO,OACAtJ,SACAqC,KAAA,SAAA9H,MACA,MAAAA,QAIA,QAAAkP,aAAAH,OAKA,MAHAA,OAAA8E,UAAA,EACA9E,MAAA+E,UAAA,GAAAC,MAEA5O,UAAA8N,IAAAC,SACA5S,KAAAyO,OACAtJ,SA9DA,GAAAoB,UACA6H,UAAAA,UACAW,SAAAA,SACAQ,UAAAA,UACAX,YAAAA,YAGA,OAAArI,SAdArJ,QACAI,OAAA,oBACAC,QAAA,sBAAAwQ,qBlBs8IEA,oBAAoBvH,SAAW,gBmB58IjC,WACA,YAQA,SAAAkN,QAAAxB,cACAA,aAAAxM,gBAAAY,aAGA,QAAAA,aACA,QACAT,MAAA,mBACA9F,QACAuS,YAAA,EACA0B,SAAA,aACAtU,MACAiU,aACAC,QAAA,aACAC,WAAA,kBAKAhO,MAAA,4BACA9F,QACA/B,IAAA,gBACA6P,WAAA,yBACA0E,YAAA,yCAGA1M,MAAA,wBACA9F,QACA/B,IAAA,mBACA6P,WAAA,wBACA0E,YAAA,qCAnCArV,QACAI,OAAA,oBACAwP,IAAA4G,QAEAA,OAAAlN,SAAA,mBCNA,WACA,YAQA,SAAAwH,oBAAAtH,aAGA,QAAAuN,aACA,QACAjN,MAAA,YACAjH,QACAwS,YAAA,kCACA1E,WAAA,sBACAqG,KAAA,KACAC,SAAA,YATA,MAAAzN,aAAAG,gBAAAoN,aAPA/W,QACAI,OAAA,oBACAC,QAAA,qBAAAyQ,oBAEAA,mBAAAxH,SAAA,kBCPA,WACA,YAOA,SAAAkJ,kBAAA7K,WAiBA,QAAAsL,YACA5J,QAAA6N,SAAA7N,QAAA6N,QAAA7N,QAAA8N,OAAA,GAAA9N,QAAA8N,OAGA,QAAArE,gBACAzJ,QAAA6N,SAAA7N,QAAA6N,QAAA7N,QAAA8N,OAAA,GAAA9N,QAAA8N,OAGA,QAAAxE,YACA,OACAE,SAAA,IAAAxJ,QAAA6N,QACAlE,KAAA3J,QAAA+N,OAAA/N,QAAA6N,QAAA7N,QAAA8N,QAIA,QAAAjE,gBAEA,MAAAvL,WAAA8N,IAAAC,QAAA,kCACAjR,KACA4S,MAAAhO,QAAA8N,OACAG,KAAAjO,QAAA6N,UAEAjP,SACAqC,KAAA,SAAA9H,MAEA,MADA6G,SAAA+N,OAAA5U,KAAA+U,WACAxO,EAAA4M,MAAAnT,KAAAoT,MACAV,IAAA,SAAAjM,MACA,MAAAA,MAAAlD,QAEA8P,OAAA,SAAA5M,MACA,MAAAA,MAAA6M,QAAA,IAEAC,UACAhQ,UAKA,QAAA6N,YAAAlT,IACA,MAAAiH,WAAA8N,IAAAC,QAAAhV,IACA+D,MACAwD,SACAqC,KAAA,SAAA9H,MACA,MAAAA,QAIA,QAAAuR,aAAAP,SAMA,MAJAA,SAAA2C,KAAA,UACA3C,QAAAsC,OAAA,GAAAS,MACA/C,QAAA1B,aAAA/I,EAAAyO,QAAAhE,QAAA1B,cAEAnK,UAAA8N,IAAAC,SACA5S,KAAA0Q,SACAvL,SACAqC,KAAA,SAAA9H,MACA,MAAAA,QAIA,QAAA+Q,eAAAC,SAKA,MAHAA,SAAA6C,UAAA,EACA7C,QAAA8C,UAAA,GAAAC,MAEA5O,UAAA8N,IAAAC,SACA5S,KAAA0Q,SACAvL,SAnFA,GAAAoB,UACA+N,OAAA,KACAD,OAAA,GACAD,QAAA,EACAhE,aAAAA,aACAU,WAAAA,WACAG,YAAAA,YACAR,cAAAA,cACAN,SAAAA,SACAH,aAAAA,aACAH,SAAAA,SAGA,OAAAtJ,SApBArJ,QACAI,OAAA,iBACAC,QAAA,mBAAAmS,kBrBinJEA,iBAAiBlJ,SAAW,gBsBvnJ9B,WACA,YAQA,SAAAkN,QAAAxB,cACAA,aAAAxM,gBAAAY,aAGA,QAAAA,aACA,QACAT,MAAA,gBACA9F,QACAuS,YAAA,EACA0B,SAAA,aACAtU,MACAiU,aACAC,QAAA,aACAC,WAAA,kBAKAhO,MAAA,yBACA9F,QACA/B,IAAA,IACA6P,WAAA,sBACA0E,YAAA,sCAGA1M,MAAA,wBACA9F,QACA/B,IAAA,eACA6P,WAAA,oBACA0E,YAAA,qCAnCArV,QACAI,OAAA,iBACAwP,IAAA4G,QAEAA,OAAAlN,SAAA,mBCNA,WACA,YAQA,SAAAmJ,iBAAAjJ,aAGA,QAAAuN,aACA,QACAjN,MAAA,cACAjH,QACAwS,YAAA,+BACA1E,WAAA,wBACAqG,KAAA,QARA,MAAAxN,aAAAG,gBAAAoN,aAPA/W,QACAI,OAAA,iBACAC,QAAA,kBAAAoS,iBAEAA,gBAAAnJ,SAAA,kBCPA,WACA,YAOA,SAAAmG,aAAAgI,MAAA/Q,GAAAgR,UAWA,QAAAC,QAEA,GAAAhI,SAAA+H,SAAAE,UAAA,UACAjI,WACAtG,QAAAwO,QAAA,EACAxO,QAAAsG,QAAAA,SAKA,QAAAgF,QAAAC,aAEA,GAAAkD,UAAApR,GAAAqR,OAoBA,OAlBAN,OACAO,KAAAvC,IAAAwC,YAAA,YACArS,KAAAgP,YAAAW,SACA2C,SAAAtD,YAAAsD,WAEAC,UAAA,IAEA7N,KAAA,SAAAhI,UACA,GAAAqN,UACA4F,SAAAX,YAAAW,SAEAmC,UAAAU,UAAA,UAAAzI,SACAtG,QAAAsG,QAAAA,QACAmI,SAAA3N,WACA,SAAA0K,WACAiD,SAAA3Q,OAAA0N,UAAArS,QAGAsV,SAAAO,QAGA,QAAAC,WACAZ,SAAAtI,OAAA,WACAqI,MAAAA,UAAAhC,IAAAwC,YAAA,YACA5O,QAAAsG,SAAA,EAhDA,GAAAtG,UACAsG,SAAA,EAEAgI,KAAAA,KACAhD,OAAAA,OACA2D,QAAAA,QAGA,OAAAjP,SAdArJ,QACAI,OAAA,YACAC,QAAA,cAAAoP,axBuvJEA,YAAYnG,SAAW,QAAS,KAAM,eyB5vJxC,WACA,YAQA,SAAAkN,QAAAxB,cACAA,aAAAxM,gBAAAY,aAGA,QAAAA,aACA,QACAT,MAAA,OACA9F,QACAuS,YAAA,EACA0B,SAAA,gBAGAnO,MAAA,aACA9F,QACA/B,IAAA,SACAF,QACA0T,IAAA,MAEAe,YAAA,2BACA1E,WAAA,sBACAnO,MACAiU,aACA8B,MAAA,aACA5B,WAAA,8BAKAhO,MAAA,cACA9F,QACA/B,IAAA,UACAgW,SAAA,aACAnG,WAAA,SAAAlB,YAAAlH,QACAkH,YAAA6I,UACA/P,OAAA+K,GAAA,cACAgB,IAAA,WAzCAtU,QACAI,OAAA,YACAwP,IAAA4G,QAEAA,OAAAlN,SAAA,mBCPA,WACA,YAQA,SAAAkP,iBAAA9R,GAAAlG,UAAAkX,UAEA,OACAe,cAAA,SAAA5D,WAEA,GAAA,MAAAA,UAAA3N,SAAA2N,UAAAhS,OAAAsV,SAAA,CACA,GAAA1I,aAAAjP,UAAAiE,IAAA,cACAgL,aAAA6I,SACA,IAAA/P,QAAA/H,UAAAiE,IAAA,SACA8D,QAAA+K,GAAA,cACAgB,IAAA,OAGA,MAAA5N,IAAAS,OAAA0N,aAOA,QAAA6D,uBAAAnS,eACAA,cAAAC,aAAAC,KAAA,mBA3BAzG,QACAI,OAAA,YACAyC,OAAA6V,uBACArY,QAAA,kBAAAmY,iB1B00JEA,gBAAgBlP,SAAW,KAAM,YAAa,YAM9CoP,sBAAsBpP,SAAW,oB2Bv1JnC,WACA,YAEAtJ,SACAI,OAAA,YACAuY,SAAA,iBACAC,cACAzC,KAAA,SACA0C,QAAA,sBACAC,QAAA;EAEArE,SACA0B,KAAA,UACA0C,QAAA,mCACAC,QAAA,sCAEApE,YACAyB,KAAA,UACA0C,QAAA,2CACAC,SAAA,GAEAC,WACA5C,KAAA,SACA0C,QAAA,uBACAC,QAAA,MAEAE,aACA7C,KAAA,SACA0C,QAAA,2BACAC,QAAA,oFAEAtE,cACA2B,KAAA,SACA0C,QAAA,gCACAC,QAAA,yBClCA,WACA,YAEA9Y,SAAAI,OAAA,OAEA,WACA,gBACA,mBACA,eACA,mBCRA,WACA,YAOA,SAAAoW,QAAAyC,WAAA1Q,OAAAmL,aAAAjE,aAEAA,YAAAkI,OAEAsB,WAAAxD,IAAAA,IAEAwD,WAAAC,IAAA,oBAAA,SAAAC,IAAAC,GAAAxY,QAEAwY,GAAAzC,aACAwC,IAAAE,iBACA9Q,OAAA+K,GAAA8F,GAAAzC,WAAA/V,WAfAZ,QACAI,OAAA,OACAwP,IAAA4G,Q7Bm6JEA,OAAOlN,SAAW,aAAc,SAAU,eAAgB,kB8Bx6J5D,WACA,YAEA,IAAAgQ,SAAAvZ,OAAAwZ,SAAAC,SAAAC,MAAA,KAAAC,OACA3Z,QAAA0V,KACAkE,QAAA,gBACAC,QAAA,QACAC,OAAAP,QACArB,YAAA,oBACA6B,SAAA,eAAAR,SAEAvZ,OAAA0V,IAAAC,QAAA3V,OAAA0V,IAAAwC,YAAAlY,OAAA0V,IAAAqE,SAAA,IAEA9Z,QAAAqN,QAAAI,UAAAsM,MAAA,WACA/Z,QAAAga,UAAAvM,UAAA","file":"app.min.js","sourcesContent":["(function(window, angular, undefined) {'use strict';\n\nvar urlBase = \"/api\";\nvar authHeader = 'authorization';\n\n/**\n * @ngdoc overview\n * @name lbServices\n * @module\n * @description\n *\n * The `lbServices` module provides services for interacting with\n * the models exposed by the LoopBack server via the REST API.\n *\n */\nvar module = angular.module(\"lbServices\", ['ngResource']);\n\n/**\n * @ngdoc object\n * @name lbServices.User\n * @header lbServices.User\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `User` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\nmodule.factory(\n  \"User\",\n  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {\n    var R = Resource(\n      urlBase + \"/Users/:id\",\n      { 'id': '@id' },\n      {\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__findById__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find a related item by id for accessTokens.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `fk` – `{*}` - Foreign key for accessTokens\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__findById__accessTokens\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Users/:id/accessTokens/:fk\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__destroyById__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a related item by id for accessTokens.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `fk` – `{*}` - Foreign key for accessTokens\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"prototype$__destroyById__accessTokens\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Users/:id/accessTokens/:fk\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__updateById__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update a related item by id for accessTokens.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `fk` – `{*}` - Foreign key for accessTokens\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__updateById__accessTokens\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Users/:id/accessTokens/:fk\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__get__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Queries accessTokens of User.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `filter` – `{object=}` - \n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__get__accessTokens\": {\n          isArray: true,\n          url: urlBase + \"/Users/:id/accessTokens\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__create__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Creates a new instance in accessTokens of this model.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__create__accessTokens\": {\n          url: urlBase + \"/Users/:id/accessTokens\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__delete__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Deletes all accessTokens of this model.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"prototype$__delete__accessTokens\": {\n          url: urlBase + \"/Users/:id/accessTokens\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__count__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Counts accessTokens of User.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"prototype$__count__accessTokens\": {\n          url: urlBase + \"/Users/:id/accessTokens/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#create\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"create\": {\n          url: urlBase + \"/Users\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#createMany\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"createMany\": {\n          isArray: true,\n          url: urlBase + \"/Users\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#upsert\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"upsert\": {\n          url: urlBase + \"/Users\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#exists\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Check whether a model instance exists in the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `exists` – `{boolean=}` - \n         */\n        \"exists\": {\n          url: urlBase + \"/Users/:id/exists\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#findById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         *  - `filter` – `{object=}` - Filter defining fields and include\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"findById\": {\n          url: urlBase + \"/Users/:id\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#find\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find all instances of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"find\": {\n          isArray: true,\n          url: urlBase + \"/Users\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#findOne\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find first instance of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"findOne\": {\n          url: urlBase + \"/Users/findOne\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#updateAll\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        \"updateAll\": {\n          url: urlBase + \"/Users/update\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#deleteById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"deleteById\": {\n          url: urlBase + \"/Users/:id\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#count\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Count instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"count\": {\n          url: urlBase + \"/Users/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$updateAttributes\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update attributes for a model instance and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$updateAttributes\": {\n          url: urlBase + \"/Users/:id\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#createChangeStream\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Create a change stream.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `options` – `{object=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `changes` – `{ReadableStream=}` - \n         */\n        \"createChangeStream\": {\n          url: urlBase + \"/Users/change-stream\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#login\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Login a user with username/email and password.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.\n         *   Default value: `user`.\n         *\n         *  - `rememberMe` - `boolean` - Whether the authentication credentials\n         *     should be remembered in localStorage across app/browser restarts.\n         *     Default: `true`.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The response body contains properties of the AccessToken created on login.\n         * Depending on the value of `include` parameter, the body may contain additional properties:\n         * \n         *   - `user` - `{User}` - Data of the currently logged in user. (`include=user`)\n         * \n         *\n         */\n        \"login\": {\n          params: {\n            include: \"user\"\n          },\n          interceptor: {\n            response: function(response) {\n              var accessToken = response.data;\n              LoopBackAuth.setUser(accessToken.id, accessToken.userId, accessToken.user);\n              LoopBackAuth.rememberMe = response.config.params.rememberMe !== false;\n              LoopBackAuth.save();\n              return response.resource;\n            }\n          },\n          url: urlBase + \"/Users/login\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#logout\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Logout a user with access token.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"logout\": {\n          interceptor: {\n            response: function(response) {\n              LoopBackAuth.clearUser();\n              LoopBackAuth.clearStorage();\n              return response.resource;\n            }\n          },\n          url: urlBase + \"/Users/logout\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#confirm\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Confirm a user registration with email verification token.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `uid` – `{string}` - \n         *\n         *  - `token` – `{string}` - \n         *\n         *  - `redirect` – `{string=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"confirm\": {\n          url: urlBase + \"/Users/confirm\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#resetPassword\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Reset password for a user with email.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"resetPassword\": {\n          url: urlBase + \"/Users/reset\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#getCurrent\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Get data of the currently logged user. Fail with HTTP result 401\n         * when there is no user logged in.\n         *\n         * @param {function(Object,Object)=} successCb\n         *    Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *    `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         */\n        \"getCurrent\": {\n           url: urlBase + \"/Users\" + \"/:id\",\n           method: \"GET\",\n           params: {\n             id: function() {\n              var id = LoopBackAuth.currentUserId;\n              if (id == null) id = '__anonymous__';\n              return id;\n            },\n          },\n          interceptor: {\n            response: function(response) {\n              LoopBackAuth.currentUserData = response.data;\n              return response.resource;\n            }\n          },\n          __isGetCurrentUser__ : true\n        }\n      }\n    );\n\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#updateOrCreate\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#update\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        R[\"update\"] = R[\"updateAll\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#destroyById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#removeById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#getCachedCurrent\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Get data of the currently logged user that was returned by the last\n         * call to {@link lbServices.User#login} or\n         * {@link lbServices.User#getCurrent}. Return null when there\n         * is no user logged in or the data of the current user were not fetched\n         * yet.\n         *\n         * @returns {Object} A User instance.\n         */\n        R.getCachedCurrent = function() {\n          var data = LoopBackAuth.currentUserData;\n          return data ? new R(data) : null;\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#isAuthenticated\n         * @methodOf lbServices.User\n         *\n         * @returns {boolean} True if the current user is authenticated (logged in).\n         */\n        R.isAuthenticated = function() {\n          return this.getCurrentId() != null;\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#getCurrentId\n         * @methodOf lbServices.User\n         *\n         * @returns {Object} Id of the currently logged-in user or null.\n         */\n        R.getCurrentId = function() {\n          return LoopBackAuth.currentUserId;\n        };\n\n    /**\n    * @ngdoc property\n    * @name lbServices.User#modelName\n    * @propertyOf lbServices.User\n    * @description\n    * The name of the model represented by this $resource,\n    * i.e. `User`.\n    */\n    R.modelName = \"User\";\n\n\n    return R;\n  }]);\n\n/**\n * @ngdoc object\n * @name lbServices.Lottery\n * @header lbServices.Lottery\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `Lottery` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\nmodule.factory(\n  \"Lottery\",\n  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {\n    var R = Resource(\n      urlBase + \"/Lotteries/:id\",\n      { 'id': '@id' },\n      {\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Lottery#create\n         * @methodOf lbServices.Lottery\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Lottery` object.)\n         * </em>\n         */\n        \"create\": {\n          url: urlBase + \"/Lotteries\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Lottery#createMany\n         * @methodOf lbServices.Lottery\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Lottery` object.)\n         * </em>\n         */\n        \"createMany\": {\n          isArray: true,\n          url: urlBase + \"/Lotteries\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Lottery#upsert\n         * @methodOf lbServices.Lottery\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Lottery` object.)\n         * </em>\n         */\n        \"upsert\": {\n          url: urlBase + \"/Lotteries\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Lottery#exists\n         * @methodOf lbServices.Lottery\n         *\n         * @description\n         *\n         * Check whether a model instance exists in the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `exists` – `{boolean=}` - \n         */\n        \"exists\": {\n          url: urlBase + \"/Lotteries/:id/exists\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Lottery#findById\n         * @methodOf lbServices.Lottery\n         *\n         * @description\n         *\n         * Find a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         *  - `filter` – `{object=}` - Filter defining fields and include\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Lottery` object.)\n         * </em>\n         */\n        \"findById\": {\n          url: urlBase + \"/Lotteries/:id\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Lottery#find\n         * @methodOf lbServices.Lottery\n         *\n         * @description\n         *\n         * Find all instances of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Lottery` object.)\n         * </em>\n         */\n        \"find\": {\n          isArray: true,\n          url: urlBase + \"/Lotteries\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Lottery#findOne\n         * @methodOf lbServices.Lottery\n         *\n         * @description\n         *\n         * Find first instance of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Lottery` object.)\n         * </em>\n         */\n        \"findOne\": {\n          url: urlBase + \"/Lotteries/findOne\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Lottery#updateAll\n         * @methodOf lbServices.Lottery\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        \"updateAll\": {\n          url: urlBase + \"/Lotteries/update\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Lottery#deleteById\n         * @methodOf lbServices.Lottery\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Lottery` object.)\n         * </em>\n         */\n        \"deleteById\": {\n          url: urlBase + \"/Lotteries/:id\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Lottery#count\n         * @methodOf lbServices.Lottery\n         *\n         * @description\n         *\n         * Count instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"count\": {\n          url: urlBase + \"/Lotteries/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Lottery#prototype$updateAttributes\n         * @methodOf lbServices.Lottery\n         *\n         * @description\n         *\n         * Update attributes for a model instance and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Lottery` object.)\n         * </em>\n         */\n        \"prototype$updateAttributes\": {\n          url: urlBase + \"/Lotteries/:id\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Lottery#createChangeStream\n         * @methodOf lbServices.Lottery\n         *\n         * @description\n         *\n         * Create a change stream.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `options` – `{object=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `changes` – `{ReadableStream=}` - \n         */\n        \"createChangeStream\": {\n          url: urlBase + \"/Lotteries/change-stream\",\n          method: \"POST\"\n        },\n      }\n    );\n\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Lottery#updateOrCreate\n         * @methodOf lbServices.Lottery\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Lottery` object.)\n         * </em>\n         */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Lottery#update\n         * @methodOf lbServices.Lottery\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        R[\"update\"] = R[\"updateAll\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Lottery#destroyById\n         * @methodOf lbServices.Lottery\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Lottery` object.)\n         * </em>\n         */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Lottery#removeById\n         * @methodOf lbServices.Lottery\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Lottery` object.)\n         * </em>\n         */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n\n    /**\n    * @ngdoc property\n    * @name lbServices.Lottery#modelName\n    * @propertyOf lbServices.Lottery\n    * @description\n    * The name of the model represented by this $resource,\n    * i.e. `Lottery`.\n    */\n    R.modelName = \"Lottery\";\n\n\n    return R;\n  }]);\n\n/**\n * @ngdoc object\n * @name lbServices.Participant\n * @header lbServices.Participant\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `Participant` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\nmodule.factory(\n  \"Participant\",\n  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {\n    var R = Resource(\n      urlBase + \"/Participants/:id\",\n      { 'id': '@id' },\n      {\n\n        // INTERNAL. Use Participant.plist() instead.\n        \"prototype$__get__plist\": {\n          url: urlBase + \"/Participants/:id/plist\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Participant#create\n         * @methodOf lbServices.Participant\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Participant` object.)\n         * </em>\n         */\n        \"create\": {\n          url: urlBase + \"/Participants\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Participant#createMany\n         * @methodOf lbServices.Participant\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Participant` object.)\n         * </em>\n         */\n        \"createMany\": {\n          isArray: true,\n          url: urlBase + \"/Participants\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Participant#upsert\n         * @methodOf lbServices.Participant\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Participant` object.)\n         * </em>\n         */\n        \"upsert\": {\n          url: urlBase + \"/Participants\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Participant#exists\n         * @methodOf lbServices.Participant\n         *\n         * @description\n         *\n         * Check whether a model instance exists in the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `exists` – `{boolean=}` - \n         */\n        \"exists\": {\n          url: urlBase + \"/Participants/:id/exists\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Participant#findById\n         * @methodOf lbServices.Participant\n         *\n         * @description\n         *\n         * Find a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         *  - `filter` – `{object=}` - Filter defining fields and include\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Participant` object.)\n         * </em>\n         */\n        \"findById\": {\n          url: urlBase + \"/Participants/:id\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Participant#find\n         * @methodOf lbServices.Participant\n         *\n         * @description\n         *\n         * Find all instances of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Participant` object.)\n         * </em>\n         */\n        \"find\": {\n          isArray: true,\n          url: urlBase + \"/Participants\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Participant#findOne\n         * @methodOf lbServices.Participant\n         *\n         * @description\n         *\n         * Find first instance of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Participant` object.)\n         * </em>\n         */\n        \"findOne\": {\n          url: urlBase + \"/Participants/findOne\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Participant#updateAll\n         * @methodOf lbServices.Participant\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        \"updateAll\": {\n          url: urlBase + \"/Participants/update\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Participant#deleteById\n         * @methodOf lbServices.Participant\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Participant` object.)\n         * </em>\n         */\n        \"deleteById\": {\n          url: urlBase + \"/Participants/:id\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Participant#count\n         * @methodOf lbServices.Participant\n         *\n         * @description\n         *\n         * Count instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"count\": {\n          url: urlBase + \"/Participants/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Participant#prototype$updateAttributes\n         * @methodOf lbServices.Participant\n         *\n         * @description\n         *\n         * Update attributes for a model instance and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Participant` object.)\n         * </em>\n         */\n        \"prototype$updateAttributes\": {\n          url: urlBase + \"/Participants/:id\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Participant#createChangeStream\n         * @methodOf lbServices.Participant\n         *\n         * @description\n         *\n         * Create a change stream.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `options` – `{object=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `changes` – `{ReadableStream=}` - \n         */\n        \"createChangeStream\": {\n          url: urlBase + \"/Participants/change-stream\",\n          method: \"POST\"\n        },\n\n        // INTERNAL. Use Plist.participants.findById() instead.\n        \"::findById::Plist::participants\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Plists/:id/participants/:fk\",\n          method: \"GET\"\n        },\n\n        // INTERNAL. Use Plist.participants.destroyById() instead.\n        \"::destroyById::Plist::participants\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Plists/:id/participants/:fk\",\n          method: \"DELETE\"\n        },\n\n        // INTERNAL. Use Plist.participants.updateById() instead.\n        \"::updateById::Plist::participants\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Plists/:id/participants/:fk\",\n          method: \"PUT\"\n        },\n\n        // INTERNAL. Use Plist.participants() instead.\n        \"::get::Plist::participants\": {\n          isArray: true,\n          url: urlBase + \"/Plists/:id/participants\",\n          method: \"GET\"\n        },\n\n        // INTERNAL. Use Plist.participants.create() instead.\n        \"::create::Plist::participants\": {\n          url: urlBase + \"/Plists/:id/participants\",\n          method: \"POST\"\n        },\n\n        // INTERNAL. Use Plist.participants.createMany() instead.\n        \"::createMany::Plist::participants\": {\n          isArray: true,\n          url: urlBase + \"/Plists/:id/participants\",\n          method: \"POST\"\n        },\n\n        // INTERNAL. Use Plist.participants.destroyAll() instead.\n        \"::delete::Plist::participants\": {\n          url: urlBase + \"/Plists/:id/participants\",\n          method: \"DELETE\"\n        },\n\n        // INTERNAL. Use Plist.participants.count() instead.\n        \"::count::Plist::participants\": {\n          url: urlBase + \"/Plists/:id/participants/count\",\n          method: \"GET\"\n        },\n      }\n    );\n\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Participant#updateOrCreate\n         * @methodOf lbServices.Participant\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Participant` object.)\n         * </em>\n         */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Participant#update\n         * @methodOf lbServices.Participant\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        R[\"update\"] = R[\"updateAll\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Participant#destroyById\n         * @methodOf lbServices.Participant\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Participant` object.)\n         * </em>\n         */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Participant#removeById\n         * @methodOf lbServices.Participant\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Participant` object.)\n         * </em>\n         */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n\n    /**\n    * @ngdoc property\n    * @name lbServices.Participant#modelName\n    * @propertyOf lbServices.Participant\n    * @description\n    * The name of the model represented by this $resource,\n    * i.e. `Participant`.\n    */\n    R.modelName = \"Participant\";\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Participant#plist\n         * @methodOf lbServices.Participant\n         *\n         * @description\n         *\n         * Fetches belongsTo relation plist.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         *  - `refresh` – `{boolean=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Plist` object.)\n         * </em>\n         */\n        R.plist = function() {\n          var TargetResource = $injector.get(\"Plist\");\n          var action = TargetResource[\"::get::Participant::plist\"];\n          return action.apply(R, arguments);\n        };\n\n    return R;\n  }]);\n\n/**\n * @ngdoc object\n * @name lbServices.Plist\n * @header lbServices.Plist\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `Plist` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\nmodule.factory(\n  \"Plist\",\n  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {\n    var R = Resource(\n      urlBase + \"/Plists/:id\",\n      { 'id': '@id' },\n      {\n\n        // INTERNAL. Use Plist.participants.findById() instead.\n        \"prototype$__findById__participants\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Plists/:id/participants/:fk\",\n          method: \"GET\"\n        },\n\n        // INTERNAL. Use Plist.participants.destroyById() instead.\n        \"prototype$__destroyById__participants\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Plists/:id/participants/:fk\",\n          method: \"DELETE\"\n        },\n\n        // INTERNAL. Use Plist.participants.updateById() instead.\n        \"prototype$__updateById__participants\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Plists/:id/participants/:fk\",\n          method: \"PUT\"\n        },\n\n        // INTERNAL. Use Plist.participants() instead.\n        \"prototype$__get__participants\": {\n          isArray: true,\n          url: urlBase + \"/Plists/:id/participants\",\n          method: \"GET\"\n        },\n\n        // INTERNAL. Use Plist.participants.create() instead.\n        \"prototype$__create__participants\": {\n          url: urlBase + \"/Plists/:id/participants\",\n          method: \"POST\"\n        },\n\n        // INTERNAL. Use Plist.participants.destroyAll() instead.\n        \"prototype$__delete__participants\": {\n          url: urlBase + \"/Plists/:id/participants\",\n          method: \"DELETE\"\n        },\n\n        // INTERNAL. Use Plist.participants.count() instead.\n        \"prototype$__count__participants\": {\n          url: urlBase + \"/Plists/:id/participants/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist#create\n         * @methodOf lbServices.Plist\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Plist` object.)\n         * </em>\n         */\n        \"create\": {\n          url: urlBase + \"/Plists\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist#createMany\n         * @methodOf lbServices.Plist\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Plist` object.)\n         * </em>\n         */\n        \"createMany\": {\n          isArray: true,\n          url: urlBase + \"/Plists\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist#upsert\n         * @methodOf lbServices.Plist\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Plist` object.)\n         * </em>\n         */\n        \"upsert\": {\n          url: urlBase + \"/Plists\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist#exists\n         * @methodOf lbServices.Plist\n         *\n         * @description\n         *\n         * Check whether a model instance exists in the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `exists` – `{boolean=}` - \n         */\n        \"exists\": {\n          url: urlBase + \"/Plists/:id/exists\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist#findById\n         * @methodOf lbServices.Plist\n         *\n         * @description\n         *\n         * Find a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         *  - `filter` – `{object=}` - Filter defining fields and include\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Plist` object.)\n         * </em>\n         */\n        \"findById\": {\n          url: urlBase + \"/Plists/:id\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist#find\n         * @methodOf lbServices.Plist\n         *\n         * @description\n         *\n         * Find all instances of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Plist` object.)\n         * </em>\n         */\n        \"find\": {\n          isArray: true,\n          url: urlBase + \"/Plists\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist#findOne\n         * @methodOf lbServices.Plist\n         *\n         * @description\n         *\n         * Find first instance of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Plist` object.)\n         * </em>\n         */\n        \"findOne\": {\n          url: urlBase + \"/Plists/findOne\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist#updateAll\n         * @methodOf lbServices.Plist\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        \"updateAll\": {\n          url: urlBase + \"/Plists/update\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist#deleteById\n         * @methodOf lbServices.Plist\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Plist` object.)\n         * </em>\n         */\n        \"deleteById\": {\n          url: urlBase + \"/Plists/:id\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist#count\n         * @methodOf lbServices.Plist\n         *\n         * @description\n         *\n         * Count instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"count\": {\n          url: urlBase + \"/Plists/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist#prototype$updateAttributes\n         * @methodOf lbServices.Plist\n         *\n         * @description\n         *\n         * Update attributes for a model instance and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Plist` object.)\n         * </em>\n         */\n        \"prototype$updateAttributes\": {\n          url: urlBase + \"/Plists/:id\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist#createChangeStream\n         * @methodOf lbServices.Plist\n         *\n         * @description\n         *\n         * Create a change stream.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `options` – `{object=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `changes` – `{ReadableStream=}` - \n         */\n        \"createChangeStream\": {\n          url: urlBase + \"/Plists/change-stream\",\n          method: \"POST\"\n        },\n\n        // INTERNAL. Use Participant.plist() instead.\n        \"::get::Participant::plist\": {\n          url: urlBase + \"/Participants/:id/plist\",\n          method: \"GET\"\n        },\n      }\n    );\n\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist#updateOrCreate\n         * @methodOf lbServices.Plist\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Plist` object.)\n         * </em>\n         */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist#update\n         * @methodOf lbServices.Plist\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        R[\"update\"] = R[\"updateAll\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist#destroyById\n         * @methodOf lbServices.Plist\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Plist` object.)\n         * </em>\n         */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist#removeById\n         * @methodOf lbServices.Plist\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Plist` object.)\n         * </em>\n         */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n\n    /**\n    * @ngdoc property\n    * @name lbServices.Plist#modelName\n    * @propertyOf lbServices.Plist\n    * @description\n    * The name of the model represented by this $resource,\n    * i.e. `Plist`.\n    */\n    R.modelName = \"Plist\";\n\n    /**\n     * @ngdoc object\n     * @name lbServices.Plist.participants\n     * @header lbServices.Plist.participants\n     * @object\n     * @description\n     *\n     * The object `Plist.participants` groups methods\n     * manipulating `Participant` instances related to `Plist`.\n     *\n     * Call {@link lbServices.Plist#participants Plist.participants()}\n     * to query all related instances.\n     */\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist#participants\n         * @methodOf lbServices.Plist\n         *\n         * @description\n         *\n         * Queries participants of Plist.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         *  - `filter` – `{object=}` - \n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Participant` object.)\n         * </em>\n         */\n        R.participants = function() {\n          var TargetResource = $injector.get(\"Participant\");\n          var action = TargetResource[\"::get::Plist::participants\"];\n          return action.apply(R, arguments);\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist.participants#count\n         * @methodOf lbServices.Plist.participants\n         *\n         * @description\n         *\n         * Counts participants of Plist.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        R.participants.count = function() {\n          var TargetResource = $injector.get(\"Participant\");\n          var action = TargetResource[\"::count::Plist::participants\"];\n          return action.apply(R, arguments);\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist.participants#create\n         * @methodOf lbServices.Plist.participants\n         *\n         * @description\n         *\n         * Creates a new instance in participants of this model.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Participant` object.)\n         * </em>\n         */\n        R.participants.create = function() {\n          var TargetResource = $injector.get(\"Participant\");\n          var action = TargetResource[\"::create::Plist::participants\"];\n          return action.apply(R, arguments);\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist.participants#createMany\n         * @methodOf lbServices.Plist.participants\n         *\n         * @description\n         *\n         * Creates a new instance in participants of this model.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Participant` object.)\n         * </em>\n         */\n        R.participants.createMany = function() {\n          var TargetResource = $injector.get(\"Participant\");\n          var action = TargetResource[\"::createMany::Plist::participants\"];\n          return action.apply(R, arguments);\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist.participants#destroyAll\n         * @methodOf lbServices.Plist.participants\n         *\n         * @description\n         *\n         * Deletes all participants of this model.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        R.participants.destroyAll = function() {\n          var TargetResource = $injector.get(\"Participant\");\n          var action = TargetResource[\"::delete::Plist::participants\"];\n          return action.apply(R, arguments);\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist.participants#destroyById\n         * @methodOf lbServices.Plist.participants\n         *\n         * @description\n         *\n         * Delete a related item by id for participants.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         *  - `fk` – `{*}` - Foreign key for participants\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        R.participants.destroyById = function() {\n          var TargetResource = $injector.get(\"Participant\");\n          var action = TargetResource[\"::destroyById::Plist::participants\"];\n          return action.apply(R, arguments);\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist.participants#findById\n         * @methodOf lbServices.Plist.participants\n         *\n         * @description\n         *\n         * Find a related item by id for participants.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         *  - `fk` – `{*}` - Foreign key for participants\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Participant` object.)\n         * </em>\n         */\n        R.participants.findById = function() {\n          var TargetResource = $injector.get(\"Participant\");\n          var action = TargetResource[\"::findById::Plist::participants\"];\n          return action.apply(R, arguments);\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist.participants#updateById\n         * @methodOf lbServices.Plist.participants\n         *\n         * @description\n         *\n         * Update a related item by id for participants.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         *  - `fk` – `{*}` - Foreign key for participants\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Participant` object.)\n         * </em>\n         */\n        R.participants.updateById = function() {\n          var TargetResource = $injector.get(\"Participant\");\n          var action = TargetResource[\"::updateById::Plist::participants\"];\n          return action.apply(R, arguments);\n        };\n\n    return R;\n  }]);\n\n\nmodule\n  .factory('LoopBackAuth', function() {\n    var props = ['accessTokenId', 'currentUserId'];\n    var propsPrefix = '$LoopBack$';\n\n    function LoopBackAuth() {\n      var self = this;\n      props.forEach(function(name) {\n        self[name] = load(name);\n      });\n      this.rememberMe = undefined;\n      this.currentUserData = null;\n    }\n\n    LoopBackAuth.prototype.save = function() {\n      var self = this;\n      var storage = this.rememberMe ? localStorage : sessionStorage;\n      props.forEach(function(name) {\n        save(storage, name, self[name]);\n      });\n    };\n\n    LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {\n      this.accessTokenId = accessTokenId;\n      this.currentUserId = userId;\n      this.currentUserData = userData;\n    }\n\n    LoopBackAuth.prototype.clearUser = function() {\n      this.accessTokenId = null;\n      this.currentUserId = null;\n      this.currentUserData = null;\n    }\n\n    LoopBackAuth.prototype.clearStorage = function() {\n      props.forEach(function(name) {\n        save(sessionStorage, name, null);\n        save(localStorage, name, null);\n      });\n    };\n\n    return new LoopBackAuth();\n\n    // Note: LocalStorage converts the value to string\n    // We are using empty string as a marker for null/undefined values.\n    function save(storage, name, value) {\n      var key = propsPrefix + name;\n      if (value == null) value = '';\n      storage[key] = value;\n    }\n\n    function load(name) {\n      var key = propsPrefix + name;\n      return localStorage[key] || sessionStorage[key] || null;\n    }\n  })\n  .config(['$httpProvider', function($httpProvider) {\n    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');\n  }])\n  .factory('LoopBackAuthRequestInterceptor', [ '$q', 'LoopBackAuth',\n    function($q, LoopBackAuth) {\n      return {\n        'request': function(config) {\n\n          // filter out non urlBase requests\n          if (config.url.substr(0, urlBase.length) !== urlBase) {\n            return config;\n          }\n\n          if (LoopBackAuth.accessTokenId) {\n            config.headers[authHeader] = LoopBackAuth.accessTokenId;\n          } else if (config.__isGetCurrentUser__) {\n            // Return a stub 401 error for User.getCurrent() when\n            // there is no user logged in\n            var res = {\n              body: { error: { status: 401 } },\n              status: 401,\n              config: config,\n              headers: function() { return undefined; }\n            };\n            return $q.reject(res);\n          }\n          return config || $q.when(config);\n        }\n      }\n    }])\n\n  /**\n   * @ngdoc object\n   * @name lbServices.LoopBackResourceProvider\n   * @header lbServices.LoopBackResourceProvider\n   * @description\n   * Use `LoopBackResourceProvider` to change the global configuration\n   * settings used by all models. Note that the provider is available\n   * to Configuration Blocks only, see\n   * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}\n   * for more details.\n   *\n   * ## Example\n   *\n   * ```js\n   * angular.module('app')\n   *  .config(function(LoopBackResourceProvider) {\n   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');\n   *  });\n   * ```\n   */\n  .provider('LoopBackResource', function LoopBackResourceProvider() {\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#setAuthHeader\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @param {string} header The header name to use, e.g. `X-Access-Token`\n     * @description\n     * Configure the REST transport to use a different header for sending\n     * the authentication token. It is sent in the `Authorization` header\n     * by default.\n     */\n    this.setAuthHeader = function(header) {\n      authHeader = header;\n    };\n\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#setUrlBase\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.\n     * @description\n     * Change the URL of the REST API server. By default, the URL provided\n     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.\n     */\n    this.setUrlBase = function(url) {\n      urlBase = url;\n    };\n\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#getUrlBase\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @description\n     * Get the URL of the REST API server. The URL provided\n     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.\n     */\n    this.getUrlBase = function() {\n      return urlBase;\n    };\n\n    this.$get = ['$resource', function($resource) {\n      return function(url, params, actions) {\n        var resource = $resource(url, params, actions);\n\n        // Angular always calls POST on $save()\n        // This hack is based on\n        // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/\n        resource.prototype.$save = function(success, error) {\n          // Fortunately, LoopBack provides a convenient `upsert` method\n          // that exactly fits our needs.\n          var result = resource.upsert.call(this, {}, this, success, error);\n          return result.$promise || result;\n        };\n        return resource;\n      };\n    }];\n  });\n\n})(window, window.angular);\n","(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app._common', [\r\n      'lbServices',\r\n      'angular-google-analytics',\r\n      'ngResource',\r\n      'ngSanitize',\r\n      'ngCookies',\r\n      'permission',\r\n      'toaster',\r\n      'ui.bootstrap',\r\n      'ui.router',\r\n    ]);\r\n})();\r\n","/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app._common')\r\n    .provider('routerHelper', routerHelperProvider);\r\n\r\n  routerHelperProvider.$inject = ['$locationProvider', '$stateProvider', '$urlRouterProvider'];\r\n  /* @ngInject */\r\n  function routerHelperProvider($locationProvider, $stateProvider, $urlRouterProvider) {\r\n    /* jshint validthis:true */\r\n    this.$get = RouterHelper;\r\n\r\n    // $locationProvider.html5Mode(true);\r\n\r\n    RouterHelper.$inject = ['$state'];\r\n\r\n    function RouterHelper($state) {\r\n      var hasOtherwise = false;\r\n\r\n      var service = {\r\n        configureStates: configureStates,\r\n        getStates: getStates\r\n      };\r\n\r\n      return service;\r\n\r\n      function configureStates(states, otherwisePath) {\r\n        states.forEach(function(state) {\r\n\r\n          var config = {\r\n            controllerAs: 'vm',\r\n          };\r\n\r\n          angular.extend(config, state.config);\r\n\r\n          if (config.views) {\r\n            _.each(config.views, function(item) {\r\n              item.controllerAs = 'vm';\r\n            });\r\n          }\r\n\r\n          $stateProvider.state(state.state, config);\r\n        });\r\n        if (otherwisePath && !hasOtherwise) {\r\n          hasOtherwise = true;\r\n          $urlRouterProvider.otherwise(otherwisePath);\r\n        }\r\n      }\r\n\r\n      function getStates() {\r\n        return $state.get();\r\n      }\r\n    }\r\n  }\r\n\r\n}());\r\n","/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app._common')\r\n    .provider('modalHelper', modalHelperProvider);\r\n\r\n  modalHelperProvider.$inject = [];\r\n  /* @ngInject */\r\n  function modalHelperProvider() {\r\n    /* jshint validthis:true */\r\n    this.$get = modalHelper;\r\n\r\n    modalHelper.$inject = ['$uibModal', '$q', 'toaster'];\r\n\r\n    function modalHelper($uibModal, $q, toaster) {\r\n\r\n      var service = {\r\n        configureModals: configureModals\r\n      };\r\n\r\n      return service;\r\n\r\n      function configureModals(modals) {\r\n        var _ret = {};\r\n        angular.forEach(modals, function(modal) {\r\n          _ret[modal.modal] = function(obj) {\r\n            var config = {\r\n              controllerAs: 'vm',\r\n              resolve: {\r\n                ModalParams: function() {\r\n                  return obj || {};\r\n                }\r\n              }\r\n            };\r\n            angular.extend(config, modal.config);\r\n\r\n            return $uibModal\r\n              .open(config)\r\n              .result\r\n              .then(ModalResultComplete)\r\n              .catch(ModalResultFailed);\r\n\r\n            function ModalResultComplete(response) {\r\n              return response;\r\n            }\r\n\r\n            function ModalResultFailed(reason) {\r\n              if (reason && reason !== \"backdrop click\") {\r\n                return $q.reject();\r\n              }\r\n            }\r\n          };\r\n        });\r\n        return _ret;\r\n      }\r\n    }\r\n  }\r\n\r\n}());\r\n","/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app._common')\r\n    .provider('configHelper', configHelperProvider);\r\n\r\n  configHelperProvider.$inject = [];\r\n\r\n  function configHelperProvider() {\r\n    /* jshint validthis:true */\r\n    this.$get = ConfigHelper;\r\n\r\n    // $locationProvider.html5Mode(true);\r\n\r\n    ConfigHelper.$inject = [];\r\n\r\n    function ConfigHelper() {\r\n\r\n      var service = {\r\n        notifyConfig: notifyConfig\r\n      };\r\n\r\n      return service;\r\n\r\n      //function notifyConfig() {}\r\n      function notifyConfig(configName, message) {\r\n        message = message || {};\r\n        console.log(\"%c CONFIG - \" + configName + \" \", 'background: #9C27B0; color: #FFF', message);\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n}());\r\n","/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app._common')\r\n    .filter('numberFixedLen', numberFixedLen)\r\n\r\n  numberFixedLen.$inject = []\r\n\r\n  function numberFixedLen() {\r\n    return function(a, b) {\r\n      return (1e4 + a + \"\").slice(-b)\r\n    }\r\n  }\r\n}());\r\n","/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app._common')\r\n    .filter('fromNow', fromNow)\r\n\r\n  fromNow.$inject = []\r\n\r\n  function fromNow() {\r\n    return function(date) {\r\n      return moment(date).fromNow();\r\n    }\r\n  }\r\n}());\r\n","/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app._common')\r\n    .filter('fileicon', fileicon)\r\n\r\n  fileicon.$inject = []\r\n\r\n  function fileicon() {\r\n    var _icons = {\r\n      \"application/pdf\": \"fa-file-pdf-o\",\r\n      \"application/powerpoint\": \"fa-file-powerpoint-o\",\r\n      \"application/x-msword\": \"fa-file-word-o\",\r\n      \"application/x-msexcel\": \"fa-file-excel-o\",\r\n      \"application/x-mspowerpoint\": \"fa-file-powerpoint-o\",\r\n      \"audio/x-mpeg-3\": \"fa-file-audio-o\",\r\n      \"image/gif\": \"fa-file-image-o\",\r\n      \"image/png\": \"fa-file-image-o\",\r\n      \"image/tiff\": \"fa-file-image-o\",\r\n      \"image/jpeg\": \"fa-file-image-o\",\r\n      \"video/avi\": \"fa-file-video-o\",\r\n      \"video/mpeg\": \"fa-file-video-o\",\r\n      \"video/msvideo\": \"fa-file-video-o\",\r\n      \"video/quicktime\": \"fa-file-video-o\",\r\n      \"application/zip\": \"fa-file-zip-o\"\r\n    };\r\n    return function(a) {\r\n      return _icons[a] || \"fa-file-o\";\r\n    }\r\n  }\r\n}());\r\n","/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app._common')\r\n    .filter('bytes', bytes)\r\n\r\n  bytes.$inject = []\r\n\r\n  function bytes() {\r\n    return function(bytes, precision) {\r\n      if (isNaN(parseFloat(bytes)) || !isFinite(bytes)) return '-';\r\n      if (typeof precision === 'undefined') precision = 1;\r\n      var units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'],\r\n        number = Math.floor(Math.log(bytes) / Math.log(1024));\r\n      return (bytes / Math.pow(1024, Math.floor(number))).toFixed(precision) + ' ' + units[number];\r\n    }\r\n  }\r\n}());\r\n","/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app._common')\r\n    .directive('ngPrint', ngPrint)\r\n\r\n  ngPrint.$inject = []\r\n\r\n  function ngPrint() {\r\n    var printSection = document.getElementById('printSection');\r\n    // if there is no printing section, create one\r\n    if (!printSection) {\r\n      printSection = document.createElement('div');\r\n      printSection.id = 'printSection';\r\n      document.body.appendChild(printSection);\r\n    }\r\n\r\n    function link(scope, element, attrs) {\r\n\r\n      element.on('click', function() {\r\n        var elemToPrint = document.getElementById(attrs.printElementId);\r\n        if (elemToPrint) {\r\n          printElement(elemToPrint);\r\n        }\r\n      });\r\n\r\n      var beforePrint = function() {\r\n        console.log('Functionality to run before printing.');\r\n      };\r\n      var afterPrint = function() {\r\n        console.log('Functionality to run after printing');\r\n          printSection.innerHTML = '';\r\n      };\r\n\r\n      if (window.matchMedia) {\r\n        var mediaQueryList = window.matchMedia('print');\r\n        mediaQueryList.addListener(function(mql) {\r\n          if (mql.matches) {\r\n            beforePrint();\r\n          } else {\r\n            afterPrint();\r\n          }\r\n        });\r\n      }\r\n\r\n      window.onbeforeprint = beforePrint;\r\n      window.onafterprint = afterPrint;\r\n\r\n    }\r\n\r\n    function printElement(elem) {\r\n      // clones the element you want to print\r\n      var domClone = elem.cloneNode(true);\r\n      printSection.appendChild(domClone);\r\n      window.print();\r\n    }\r\n    return {\r\n      link: link,\r\n      restrict: 'A'\r\n    };\r\n  }\r\n\r\n}());\r\n","/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app._common')\r\n    .directive('errSrc', errSrc)\r\n\r\n  errSrc.$inject = []\r\n\r\n  function errSrc() {\r\n    return {\r\n      link: function(scope, element, attrs) {\r\n        if(!attrs.ngSrc){\r\n          attrs.$set('src', attrs.errSrc);\r\n        }\r\n\r\n        element.bind('error', function() {\r\n\r\n          if (attrs.errSrc == \"REMOVE\") {\r\n            element.remove();\r\n            return;\r\n          }\r\n          if (attrs.src != attrs.errSrc) {\r\n            attrs.$set('src', attrs.errSrc);\r\n          }\r\n        });\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n}());\r\n","/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app._common')\r\n    .run(PermissionsConfig);\r\n\r\n  /* @ngInject */\r\n  function PermissionsConfig(configHelper, Permission, AuthService) {\r\n\r\n    Permission.defineRole('Anonymous', function() {\r\n      return !AuthService.AuthObj;\r\n    });\r\n\r\n    configHelper.notifyConfig(\"Permissions\", \"Loaded\");\r\n\r\n  }\r\n\r\n}());\r\n","(function(window, angular, undefined) {'use strict';\n\nvar urlBase = \"/api\";\nvar authHeader = 'authorization';\n\n/**\n * @ngdoc overview\n * @name lbServices\n * @module\n * @description\n *\n * The `lbServices` module provides services for interacting with\n * the models exposed by the LoopBack server via the REST API.\n *\n */\nvar module = angular.module(\"lbServices\", ['ngResource']);\n\n/**\n * @ngdoc object\n * @name lbServices.User\n * @header lbServices.User\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `User` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\nmodule.factory(\n  \"User\",\n  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {\n    var R = Resource(\n      urlBase + \"/Users/:id\",\n      { 'id': '@id' },\n      {\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__findById__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find a related item by id for accessTokens.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `fk` – `{*}` - Foreign key for accessTokens\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__findById__accessTokens\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Users/:id/accessTokens/:fk\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__destroyById__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a related item by id for accessTokens.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `fk` – `{*}` - Foreign key for accessTokens\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"prototype$__destroyById__accessTokens\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Users/:id/accessTokens/:fk\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__updateById__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update a related item by id for accessTokens.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `fk` – `{*}` - Foreign key for accessTokens\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__updateById__accessTokens\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Users/:id/accessTokens/:fk\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__get__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Queries accessTokens of User.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `filter` – `{object=}` - \n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__get__accessTokens\": {\n          isArray: true,\n          url: urlBase + \"/Users/:id/accessTokens\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__create__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Creates a new instance in accessTokens of this model.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__create__accessTokens\": {\n          url: urlBase + \"/Users/:id/accessTokens\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__delete__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Deletes all accessTokens of this model.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"prototype$__delete__accessTokens\": {\n          url: urlBase + \"/Users/:id/accessTokens\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__count__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Counts accessTokens of User.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"prototype$__count__accessTokens\": {\n          url: urlBase + \"/Users/:id/accessTokens/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#create\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"create\": {\n          url: urlBase + \"/Users\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#createMany\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"createMany\": {\n          isArray: true,\n          url: urlBase + \"/Users\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#upsert\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"upsert\": {\n          url: urlBase + \"/Users\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#exists\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Check whether a model instance exists in the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `exists` – `{boolean=}` - \n         */\n        \"exists\": {\n          url: urlBase + \"/Users/:id/exists\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#findById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         *  - `filter` – `{object=}` - Filter defining fields and include\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"findById\": {\n          url: urlBase + \"/Users/:id\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#find\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find all instances of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"find\": {\n          isArray: true,\n          url: urlBase + \"/Users\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#findOne\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find first instance of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"findOne\": {\n          url: urlBase + \"/Users/findOne\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#updateAll\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        \"updateAll\": {\n          url: urlBase + \"/Users/update\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#deleteById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"deleteById\": {\n          url: urlBase + \"/Users/:id\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#count\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Count instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"count\": {\n          url: urlBase + \"/Users/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$updateAttributes\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update attributes for a model instance and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$updateAttributes\": {\n          url: urlBase + \"/Users/:id\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#createChangeStream\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Create a change stream.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `options` – `{object=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `changes` – `{ReadableStream=}` - \n         */\n        \"createChangeStream\": {\n          url: urlBase + \"/Users/change-stream\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#login\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Login a user with username/email and password.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.\n         *   Default value: `user`.\n         *\n         *  - `rememberMe` - `boolean` - Whether the authentication credentials\n         *     should be remembered in localStorage across app/browser restarts.\n         *     Default: `true`.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The response body contains properties of the AccessToken created on login.\n         * Depending on the value of `include` parameter, the body may contain additional properties:\n         * \n         *   - `user` - `{User}` - Data of the currently logged in user. (`include=user`)\n         * \n         *\n         */\n        \"login\": {\n          params: {\n            include: \"user\"\n          },\n          interceptor: {\n            response: function(response) {\n              var accessToken = response.data;\n              LoopBackAuth.setUser(accessToken.id, accessToken.userId, accessToken.user);\n              LoopBackAuth.rememberMe = response.config.params.rememberMe !== false;\n              LoopBackAuth.save();\n              return response.resource;\n            }\n          },\n          url: urlBase + \"/Users/login\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#logout\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Logout a user with access token.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"logout\": {\n          interceptor: {\n            response: function(response) {\n              LoopBackAuth.clearUser();\n              LoopBackAuth.clearStorage();\n              return response.resource;\n            }\n          },\n          url: urlBase + \"/Users/logout\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#confirm\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Confirm a user registration with email verification token.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `uid` – `{string}` - \n         *\n         *  - `token` – `{string}` - \n         *\n         *  - `redirect` – `{string=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"confirm\": {\n          url: urlBase + \"/Users/confirm\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#resetPassword\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Reset password for a user with email.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"resetPassword\": {\n          url: urlBase + \"/Users/reset\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#getCurrent\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Get data of the currently logged user. Fail with HTTP result 401\n         * when there is no user logged in.\n         *\n         * @param {function(Object,Object)=} successCb\n         *    Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *    `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         */\n        \"getCurrent\": {\n           url: urlBase + \"/Users\" + \"/:id\",\n           method: \"GET\",\n           params: {\n             id: function() {\n              var id = LoopBackAuth.currentUserId;\n              if (id == null) id = '__anonymous__';\n              return id;\n            },\n          },\n          interceptor: {\n            response: function(response) {\n              LoopBackAuth.currentUserData = response.data;\n              return response.resource;\n            }\n          },\n          __isGetCurrentUser__ : true\n        }\n      }\n    );\n\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#updateOrCreate\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#update\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        R[\"update\"] = R[\"updateAll\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#destroyById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#removeById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#getCachedCurrent\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Get data of the currently logged user that was returned by the last\n         * call to {@link lbServices.User#login} or\n         * {@link lbServices.User#getCurrent}. Return null when there\n         * is no user logged in or the data of the current user were not fetched\n         * yet.\n         *\n         * @returns {Object} A User instance.\n         */\n        R.getCachedCurrent = function() {\n          var data = LoopBackAuth.currentUserData;\n          return data ? new R(data) : null;\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#isAuthenticated\n         * @methodOf lbServices.User\n         *\n         * @returns {boolean} True if the current user is authenticated (logged in).\n         */\n        R.isAuthenticated = function() {\n          return this.getCurrentId() != null;\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#getCurrentId\n         * @methodOf lbServices.User\n         *\n         * @returns {Object} Id of the currently logged-in user or null.\n         */\n        R.getCurrentId = function() {\n          return LoopBackAuth.currentUserId;\n        };\n\n    /**\n    * @ngdoc property\n    * @name lbServices.User#modelName\n    * @propertyOf lbServices.User\n    * @description\n    * The name of the model represented by this $resource,\n    * i.e. `User`.\n    */\n    R.modelName = \"User\";\n\n\n    return R;\n  }]);\n\n/**\n * @ngdoc object\n * @name lbServices.Lottery\n * @header lbServices.Lottery\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `Lottery` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\nmodule.factory(\n  \"Lottery\",\n  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {\n    var R = Resource(\n      urlBase + \"/Lotteries/:id\",\n      { 'id': '@id' },\n      {\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Lottery#create\n         * @methodOf lbServices.Lottery\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Lottery` object.)\n         * </em>\n         */\n        \"create\": {\n          url: urlBase + \"/Lotteries\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Lottery#createMany\n         * @methodOf lbServices.Lottery\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Lottery` object.)\n         * </em>\n         */\n        \"createMany\": {\n          isArray: true,\n          url: urlBase + \"/Lotteries\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Lottery#upsert\n         * @methodOf lbServices.Lottery\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Lottery` object.)\n         * </em>\n         */\n        \"upsert\": {\n          url: urlBase + \"/Lotteries\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Lottery#exists\n         * @methodOf lbServices.Lottery\n         *\n         * @description\n         *\n         * Check whether a model instance exists in the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `exists` – `{boolean=}` - \n         */\n        \"exists\": {\n          url: urlBase + \"/Lotteries/:id/exists\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Lottery#findById\n         * @methodOf lbServices.Lottery\n         *\n         * @description\n         *\n         * Find a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         *  - `filter` – `{object=}` - Filter defining fields and include\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Lottery` object.)\n         * </em>\n         */\n        \"findById\": {\n          url: urlBase + \"/Lotteries/:id\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Lottery#find\n         * @methodOf lbServices.Lottery\n         *\n         * @description\n         *\n         * Find all instances of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Lottery` object.)\n         * </em>\n         */\n        \"find\": {\n          isArray: true,\n          url: urlBase + \"/Lotteries\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Lottery#findOne\n         * @methodOf lbServices.Lottery\n         *\n         * @description\n         *\n         * Find first instance of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Lottery` object.)\n         * </em>\n         */\n        \"findOne\": {\n          url: urlBase + \"/Lotteries/findOne\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Lottery#updateAll\n         * @methodOf lbServices.Lottery\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        \"updateAll\": {\n          url: urlBase + \"/Lotteries/update\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Lottery#deleteById\n         * @methodOf lbServices.Lottery\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Lottery` object.)\n         * </em>\n         */\n        \"deleteById\": {\n          url: urlBase + \"/Lotteries/:id\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Lottery#count\n         * @methodOf lbServices.Lottery\n         *\n         * @description\n         *\n         * Count instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"count\": {\n          url: urlBase + \"/Lotteries/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Lottery#prototype$updateAttributes\n         * @methodOf lbServices.Lottery\n         *\n         * @description\n         *\n         * Update attributes for a model instance and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Lottery` object.)\n         * </em>\n         */\n        \"prototype$updateAttributes\": {\n          url: urlBase + \"/Lotteries/:id\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Lottery#createChangeStream\n         * @methodOf lbServices.Lottery\n         *\n         * @description\n         *\n         * Create a change stream.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `options` – `{object=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `changes` – `{ReadableStream=}` - \n         */\n        \"createChangeStream\": {\n          url: urlBase + \"/Lotteries/change-stream\",\n          method: \"POST\"\n        },\n      }\n    );\n\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Lottery#updateOrCreate\n         * @methodOf lbServices.Lottery\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Lottery` object.)\n         * </em>\n         */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Lottery#update\n         * @methodOf lbServices.Lottery\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        R[\"update\"] = R[\"updateAll\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Lottery#destroyById\n         * @methodOf lbServices.Lottery\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Lottery` object.)\n         * </em>\n         */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Lottery#removeById\n         * @methodOf lbServices.Lottery\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Lottery` object.)\n         * </em>\n         */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n\n    /**\n    * @ngdoc property\n    * @name lbServices.Lottery#modelName\n    * @propertyOf lbServices.Lottery\n    * @description\n    * The name of the model represented by this $resource,\n    * i.e. `Lottery`.\n    */\n    R.modelName = \"Lottery\";\n\n\n    return R;\n  }]);\n\n/**\n * @ngdoc object\n * @name lbServices.Participant\n * @header lbServices.Participant\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `Participant` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\nmodule.factory(\n  \"Participant\",\n  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {\n    var R = Resource(\n      urlBase + \"/Participants/:id\",\n      { 'id': '@id' },\n      {\n\n        // INTERNAL. Use Participant.plist() instead.\n        \"prototype$__get__plist\": {\n          url: urlBase + \"/Participants/:id/plist\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Participant#create\n         * @methodOf lbServices.Participant\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Participant` object.)\n         * </em>\n         */\n        \"create\": {\n          url: urlBase + \"/Participants\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Participant#createMany\n         * @methodOf lbServices.Participant\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Participant` object.)\n         * </em>\n         */\n        \"createMany\": {\n          isArray: true,\n          url: urlBase + \"/Participants\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Participant#upsert\n         * @methodOf lbServices.Participant\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Participant` object.)\n         * </em>\n         */\n        \"upsert\": {\n          url: urlBase + \"/Participants\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Participant#exists\n         * @methodOf lbServices.Participant\n         *\n         * @description\n         *\n         * Check whether a model instance exists in the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `exists` – `{boolean=}` - \n         */\n        \"exists\": {\n          url: urlBase + \"/Participants/:id/exists\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Participant#findById\n         * @methodOf lbServices.Participant\n         *\n         * @description\n         *\n         * Find a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         *  - `filter` – `{object=}` - Filter defining fields and include\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Participant` object.)\n         * </em>\n         */\n        \"findById\": {\n          url: urlBase + \"/Participants/:id\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Participant#find\n         * @methodOf lbServices.Participant\n         *\n         * @description\n         *\n         * Find all instances of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Participant` object.)\n         * </em>\n         */\n        \"find\": {\n          isArray: true,\n          url: urlBase + \"/Participants\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Participant#findOne\n         * @methodOf lbServices.Participant\n         *\n         * @description\n         *\n         * Find first instance of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Participant` object.)\n         * </em>\n         */\n        \"findOne\": {\n          url: urlBase + \"/Participants/findOne\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Participant#updateAll\n         * @methodOf lbServices.Participant\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        \"updateAll\": {\n          url: urlBase + \"/Participants/update\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Participant#deleteById\n         * @methodOf lbServices.Participant\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Participant` object.)\n         * </em>\n         */\n        \"deleteById\": {\n          url: urlBase + \"/Participants/:id\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Participant#count\n         * @methodOf lbServices.Participant\n         *\n         * @description\n         *\n         * Count instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"count\": {\n          url: urlBase + \"/Participants/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Participant#prototype$updateAttributes\n         * @methodOf lbServices.Participant\n         *\n         * @description\n         *\n         * Update attributes for a model instance and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Participant` object.)\n         * </em>\n         */\n        \"prototype$updateAttributes\": {\n          url: urlBase + \"/Participants/:id\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Participant#createChangeStream\n         * @methodOf lbServices.Participant\n         *\n         * @description\n         *\n         * Create a change stream.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `options` – `{object=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `changes` – `{ReadableStream=}` - \n         */\n        \"createChangeStream\": {\n          url: urlBase + \"/Participants/change-stream\",\n          method: \"POST\"\n        },\n\n        // INTERNAL. Use Plist.participants.findById() instead.\n        \"::findById::Plist::participants\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Plists/:id/participants/:fk\",\n          method: \"GET\"\n        },\n\n        // INTERNAL. Use Plist.participants.destroyById() instead.\n        \"::destroyById::Plist::participants\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Plists/:id/participants/:fk\",\n          method: \"DELETE\"\n        },\n\n        // INTERNAL. Use Plist.participants.updateById() instead.\n        \"::updateById::Plist::participants\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Plists/:id/participants/:fk\",\n          method: \"PUT\"\n        },\n\n        // INTERNAL. Use Plist.participants() instead.\n        \"::get::Plist::participants\": {\n          isArray: true,\n          url: urlBase + \"/Plists/:id/participants\",\n          method: \"GET\"\n        },\n\n        // INTERNAL. Use Plist.participants.create() instead.\n        \"::create::Plist::participants\": {\n          url: urlBase + \"/Plists/:id/participants\",\n          method: \"POST\"\n        },\n\n        // INTERNAL. Use Plist.participants.createMany() instead.\n        \"::createMany::Plist::participants\": {\n          isArray: true,\n          url: urlBase + \"/Plists/:id/participants\",\n          method: \"POST\"\n        },\n\n        // INTERNAL. Use Plist.participants.destroyAll() instead.\n        \"::delete::Plist::participants\": {\n          url: urlBase + \"/Plists/:id/participants\",\n          method: \"DELETE\"\n        },\n\n        // INTERNAL. Use Plist.participants.count() instead.\n        \"::count::Plist::participants\": {\n          url: urlBase + \"/Plists/:id/participants/count\",\n          method: \"GET\"\n        },\n      }\n    );\n\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Participant#updateOrCreate\n         * @methodOf lbServices.Participant\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Participant` object.)\n         * </em>\n         */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Participant#update\n         * @methodOf lbServices.Participant\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        R[\"update\"] = R[\"updateAll\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Participant#destroyById\n         * @methodOf lbServices.Participant\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Participant` object.)\n         * </em>\n         */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Participant#removeById\n         * @methodOf lbServices.Participant\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Participant` object.)\n         * </em>\n         */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n\n    /**\n    * @ngdoc property\n    * @name lbServices.Participant#modelName\n    * @propertyOf lbServices.Participant\n    * @description\n    * The name of the model represented by this $resource,\n    * i.e. `Participant`.\n    */\n    R.modelName = \"Participant\";\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Participant#plist\n         * @methodOf lbServices.Participant\n         *\n         * @description\n         *\n         * Fetches belongsTo relation plist.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         *  - `refresh` – `{boolean=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Plist` object.)\n         * </em>\n         */\n        R.plist = function() {\n          var TargetResource = $injector.get(\"Plist\");\n          var action = TargetResource[\"::get::Participant::plist\"];\n          return action.apply(R, arguments);\n        };\n\n    return R;\n  }]);\n\n/**\n * @ngdoc object\n * @name lbServices.Plist\n * @header lbServices.Plist\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `Plist` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\nmodule.factory(\n  \"Plist\",\n  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {\n    var R = Resource(\n      urlBase + \"/Plists/:id\",\n      { 'id': '@id' },\n      {\n\n        // INTERNAL. Use Plist.participants.findById() instead.\n        \"prototype$__findById__participants\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Plists/:id/participants/:fk\",\n          method: \"GET\"\n        },\n\n        // INTERNAL. Use Plist.participants.destroyById() instead.\n        \"prototype$__destroyById__participants\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Plists/:id/participants/:fk\",\n          method: \"DELETE\"\n        },\n\n        // INTERNAL. Use Plist.participants.updateById() instead.\n        \"prototype$__updateById__participants\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Plists/:id/participants/:fk\",\n          method: \"PUT\"\n        },\n\n        // INTERNAL. Use Plist.participants() instead.\n        \"prototype$__get__participants\": {\n          isArray: true,\n          url: urlBase + \"/Plists/:id/participants\",\n          method: \"GET\"\n        },\n\n        // INTERNAL. Use Plist.participants.create() instead.\n        \"prototype$__create__participants\": {\n          url: urlBase + \"/Plists/:id/participants\",\n          method: \"POST\"\n        },\n\n        // INTERNAL. Use Plist.participants.destroyAll() instead.\n        \"prototype$__delete__participants\": {\n          url: urlBase + \"/Plists/:id/participants\",\n          method: \"DELETE\"\n        },\n\n        // INTERNAL. Use Plist.participants.count() instead.\n        \"prototype$__count__participants\": {\n          url: urlBase + \"/Plists/:id/participants/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist#create\n         * @methodOf lbServices.Plist\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Plist` object.)\n         * </em>\n         */\n        \"create\": {\n          url: urlBase + \"/Plists\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist#createMany\n         * @methodOf lbServices.Plist\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Plist` object.)\n         * </em>\n         */\n        \"createMany\": {\n          isArray: true,\n          url: urlBase + \"/Plists\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist#upsert\n         * @methodOf lbServices.Plist\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Plist` object.)\n         * </em>\n         */\n        \"upsert\": {\n          url: urlBase + \"/Plists\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist#exists\n         * @methodOf lbServices.Plist\n         *\n         * @description\n         *\n         * Check whether a model instance exists in the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `exists` – `{boolean=}` - \n         */\n        \"exists\": {\n          url: urlBase + \"/Plists/:id/exists\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist#findById\n         * @methodOf lbServices.Plist\n         *\n         * @description\n         *\n         * Find a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         *  - `filter` – `{object=}` - Filter defining fields and include\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Plist` object.)\n         * </em>\n         */\n        \"findById\": {\n          url: urlBase + \"/Plists/:id\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist#find\n         * @methodOf lbServices.Plist\n         *\n         * @description\n         *\n         * Find all instances of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Plist` object.)\n         * </em>\n         */\n        \"find\": {\n          isArray: true,\n          url: urlBase + \"/Plists\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist#findOne\n         * @methodOf lbServices.Plist\n         *\n         * @description\n         *\n         * Find first instance of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Plist` object.)\n         * </em>\n         */\n        \"findOne\": {\n          url: urlBase + \"/Plists/findOne\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist#updateAll\n         * @methodOf lbServices.Plist\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        \"updateAll\": {\n          url: urlBase + \"/Plists/update\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist#deleteById\n         * @methodOf lbServices.Plist\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Plist` object.)\n         * </em>\n         */\n        \"deleteById\": {\n          url: urlBase + \"/Plists/:id\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist#count\n         * @methodOf lbServices.Plist\n         *\n         * @description\n         *\n         * Count instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"count\": {\n          url: urlBase + \"/Plists/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist#prototype$updateAttributes\n         * @methodOf lbServices.Plist\n         *\n         * @description\n         *\n         * Update attributes for a model instance and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Plist` object.)\n         * </em>\n         */\n        \"prototype$updateAttributes\": {\n          url: urlBase + \"/Plists/:id\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist#createChangeStream\n         * @methodOf lbServices.Plist\n         *\n         * @description\n         *\n         * Create a change stream.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `options` – `{object=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `changes` – `{ReadableStream=}` - \n         */\n        \"createChangeStream\": {\n          url: urlBase + \"/Plists/change-stream\",\n          method: \"POST\"\n        },\n\n        // INTERNAL. Use Participant.plist() instead.\n        \"::get::Participant::plist\": {\n          url: urlBase + \"/Participants/:id/plist\",\n          method: \"GET\"\n        },\n      }\n    );\n\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist#updateOrCreate\n         * @methodOf lbServices.Plist\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Plist` object.)\n         * </em>\n         */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist#update\n         * @methodOf lbServices.Plist\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        R[\"update\"] = R[\"updateAll\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist#destroyById\n         * @methodOf lbServices.Plist\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Plist` object.)\n         * </em>\n         */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist#removeById\n         * @methodOf lbServices.Plist\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Plist` object.)\n         * </em>\n         */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n\n    /**\n    * @ngdoc property\n    * @name lbServices.Plist#modelName\n    * @propertyOf lbServices.Plist\n    * @description\n    * The name of the model represented by this $resource,\n    * i.e. `Plist`.\n    */\n    R.modelName = \"Plist\";\n\n    /**\n     * @ngdoc object\n     * @name lbServices.Plist.participants\n     * @header lbServices.Plist.participants\n     * @object\n     * @description\n     *\n     * The object `Plist.participants` groups methods\n     * manipulating `Participant` instances related to `Plist`.\n     *\n     * Call {@link lbServices.Plist#participants Plist.participants()}\n     * to query all related instances.\n     */\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist#participants\n         * @methodOf lbServices.Plist\n         *\n         * @description\n         *\n         * Queries participants of Plist.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         *  - `filter` – `{object=}` - \n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Participant` object.)\n         * </em>\n         */\n        R.participants = function() {\n          var TargetResource = $injector.get(\"Participant\");\n          var action = TargetResource[\"::get::Plist::participants\"];\n          return action.apply(R, arguments);\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist.participants#count\n         * @methodOf lbServices.Plist.participants\n         *\n         * @description\n         *\n         * Counts participants of Plist.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        R.participants.count = function() {\n          var TargetResource = $injector.get(\"Participant\");\n          var action = TargetResource[\"::count::Plist::participants\"];\n          return action.apply(R, arguments);\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist.participants#create\n         * @methodOf lbServices.Plist.participants\n         *\n         * @description\n         *\n         * Creates a new instance in participants of this model.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Participant` object.)\n         * </em>\n         */\n        R.participants.create = function() {\n          var TargetResource = $injector.get(\"Participant\");\n          var action = TargetResource[\"::create::Plist::participants\"];\n          return action.apply(R, arguments);\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist.participants#createMany\n         * @methodOf lbServices.Plist.participants\n         *\n         * @description\n         *\n         * Creates a new instance in participants of this model.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Participant` object.)\n         * </em>\n         */\n        R.participants.createMany = function() {\n          var TargetResource = $injector.get(\"Participant\");\n          var action = TargetResource[\"::createMany::Plist::participants\"];\n          return action.apply(R, arguments);\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist.participants#destroyAll\n         * @methodOf lbServices.Plist.participants\n         *\n         * @description\n         *\n         * Deletes all participants of this model.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        R.participants.destroyAll = function() {\n          var TargetResource = $injector.get(\"Participant\");\n          var action = TargetResource[\"::delete::Plist::participants\"];\n          return action.apply(R, arguments);\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist.participants#destroyById\n         * @methodOf lbServices.Plist.participants\n         *\n         * @description\n         *\n         * Delete a related item by id for participants.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         *  - `fk` – `{*}` - Foreign key for participants\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        R.participants.destroyById = function() {\n          var TargetResource = $injector.get(\"Participant\");\n          var action = TargetResource[\"::destroyById::Plist::participants\"];\n          return action.apply(R, arguments);\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist.participants#findById\n         * @methodOf lbServices.Plist.participants\n         *\n         * @description\n         *\n         * Find a related item by id for participants.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         *  - `fk` – `{*}` - Foreign key for participants\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Participant` object.)\n         * </em>\n         */\n        R.participants.findById = function() {\n          var TargetResource = $injector.get(\"Participant\");\n          var action = TargetResource[\"::findById::Plist::participants\"];\n          return action.apply(R, arguments);\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Plist.participants#updateById\n         * @methodOf lbServices.Plist.participants\n         *\n         * @description\n         *\n         * Update a related item by id for participants.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         *  - `fk` – `{*}` - Foreign key for participants\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Participant` object.)\n         * </em>\n         */\n        R.participants.updateById = function() {\n          var TargetResource = $injector.get(\"Participant\");\n          var action = TargetResource[\"::updateById::Plist::participants\"];\n          return action.apply(R, arguments);\n        };\n\n    return R;\n  }]);\n\n\nmodule\n  .factory('LoopBackAuth', function() {\n    var props = ['accessTokenId', 'currentUserId'];\n    var propsPrefix = '$LoopBack$';\n\n    function LoopBackAuth() {\n      var self = this;\n      props.forEach(function(name) {\n        self[name] = load(name);\n      });\n      this.rememberMe = undefined;\n      this.currentUserData = null;\n    }\n\n    LoopBackAuth.prototype.save = function() {\n      var self = this;\n      var storage = this.rememberMe ? localStorage : sessionStorage;\n      props.forEach(function(name) {\n        save(storage, name, self[name]);\n      });\n    };\n\n    LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {\n      this.accessTokenId = accessTokenId;\n      this.currentUserId = userId;\n      this.currentUserData = userData;\n    }\n\n    LoopBackAuth.prototype.clearUser = function() {\n      this.accessTokenId = null;\n      this.currentUserId = null;\n      this.currentUserData = null;\n    }\n\n    LoopBackAuth.prototype.clearStorage = function() {\n      props.forEach(function(name) {\n        save(sessionStorage, name, null);\n        save(localStorage, name, null);\n      });\n    };\n\n    return new LoopBackAuth();\n\n    // Note: LocalStorage converts the value to string\n    // We are using empty string as a marker for null/undefined values.\n    function save(storage, name, value) {\n      var key = propsPrefix + name;\n      if (value == null) value = '';\n      storage[key] = value;\n    }\n\n    function load(name) {\n      var key = propsPrefix + name;\n      return localStorage[key] || sessionStorage[key] || null;\n    }\n  })\n  .config(['$httpProvider', function($httpProvider) {\n    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');\n  }])\n  .factory('LoopBackAuthRequestInterceptor', [ '$q', 'LoopBackAuth',\n    function($q, LoopBackAuth) {\n      return {\n        'request': function(config) {\n\n          // filter out non urlBase requests\n          if (config.url.substr(0, urlBase.length) !== urlBase) {\n            return config;\n          }\n\n          if (LoopBackAuth.accessTokenId) {\n            config.headers[authHeader] = LoopBackAuth.accessTokenId;\n          } else if (config.__isGetCurrentUser__) {\n            // Return a stub 401 error for User.getCurrent() when\n            // there is no user logged in\n            var res = {\n              body: { error: { status: 401 } },\n              status: 401,\n              config: config,\n              headers: function() { return undefined; }\n            };\n            return $q.reject(res);\n          }\n          return config || $q.when(config);\n        }\n      }\n    }])\n\n  /**\n   * @ngdoc object\n   * @name lbServices.LoopBackResourceProvider\n   * @header lbServices.LoopBackResourceProvider\n   * @description\n   * Use `LoopBackResourceProvider` to change the global configuration\n   * settings used by all models. Note that the provider is available\n   * to Configuration Blocks only, see\n   * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}\n   * for more details.\n   *\n   * ## Example\n   *\n   * ```js\n   * angular.module('app')\n   *  .config(function(LoopBackResourceProvider) {\n   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');\n   *  });\n   * ```\n   */\n  .provider('LoopBackResource', function LoopBackResourceProvider() {\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#setAuthHeader\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @param {string} header The header name to use, e.g. `X-Access-Token`\n     * @description\n     * Configure the REST transport to use a different header for sending\n     * the authentication token. It is sent in the `Authorization` header\n     * by default.\n     */\n    this.setAuthHeader = function(header) {\n      authHeader = header;\n    };\n\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#setUrlBase\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.\n     * @description\n     * Change the URL of the REST API server. By default, the URL provided\n     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.\n     */\n    this.setUrlBase = function(url) {\n      urlBase = url;\n    };\n\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#getUrlBase\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @description\n     * Get the URL of the REST API server. The URL provided\n     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.\n     */\n    this.getUrlBase = function() {\n      return urlBase;\n    };\n\n    this.$get = ['$resource', function($resource) {\n      return function(url, params, actions) {\n        var resource = $resource(url, params, actions);\n\n        // Angular always calls POST on $save()\n        // This hack is based on\n        // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/\n        resource.prototype.$save = function(success, error) {\n          // Fortunately, LoopBack provides a convenient `upsert` method\n          // that exactly fits our needs.\n          var result = resource.upsert.call(this, {}, this, success, error);\n          return result.$promise || result;\n        };\n        return resource;\n      };\n    }];\n  });\n\n})(window, window.angular);\n;(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app._common', [\r\n      'lbServices',\r\n      'angular-google-analytics',\r\n      'ngResource',\r\n      'ngSanitize',\r\n      'ngCookies',\r\n      'permission',\r\n      'toaster',\r\n      'ui.bootstrap',\r\n      'ui.router',\r\n    ]);\r\n})();\r\n;/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app._common')\r\n    .provider('routerHelper', routerHelperProvider);\r\n\r\n  routerHelperProvider.$inject = ['$locationProvider', '$stateProvider', '$urlRouterProvider'];\r\n  /* @ngInject */\r\n  function routerHelperProvider($locationProvider, $stateProvider, $urlRouterProvider) {\r\n    /* jshint validthis:true */\r\n    this.$get = RouterHelper;\r\n\r\n    // $locationProvider.html5Mode(true);\r\n\r\n    RouterHelper.$inject = ['$state'];\r\n\r\n    function RouterHelper($state) {\r\n      var hasOtherwise = false;\r\n\r\n      var service = {\r\n        configureStates: configureStates,\r\n        getStates: getStates\r\n      };\r\n\r\n      return service;\r\n\r\n      function configureStates(states, otherwisePath) {\r\n        states.forEach(function(state) {\r\n\r\n          var config = {\r\n            controllerAs: 'vm',\r\n          };\r\n\r\n          angular.extend(config, state.config);\r\n\r\n          if (config.views) {\r\n            _.each(config.views, function(item) {\r\n              item.controllerAs = 'vm';\r\n            });\r\n          }\r\n\r\n          $stateProvider.state(state.state, config);\r\n        });\r\n        if (otherwisePath && !hasOtherwise) {\r\n          hasOtherwise = true;\r\n          $urlRouterProvider.otherwise(otherwisePath);\r\n        }\r\n      }\r\n\r\n      function getStates() {\r\n        return $state.get();\r\n      }\r\n    }\r\n  }\r\n\r\n}());\r\n;/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app._common')\r\n    .provider('modalHelper', modalHelperProvider);\r\n\r\n  modalHelperProvider.$inject = [];\r\n  /* @ngInject */\r\n  function modalHelperProvider() {\r\n    /* jshint validthis:true */\r\n    this.$get = modalHelper;\r\n\r\n    modalHelper.$inject = ['$uibModal', '$q', 'toaster'];\r\n\r\n    function modalHelper($uibModal, $q, toaster) {\r\n\r\n      var service = {\r\n        configureModals: configureModals\r\n      };\r\n\r\n      return service;\r\n\r\n      function configureModals(modals) {\r\n        var _ret = {};\r\n        angular.forEach(modals, function(modal) {\r\n          _ret[modal.modal] = function(obj) {\r\n            var config = {\r\n              controllerAs: 'vm',\r\n              resolve: {\r\n                ModalParams: function() {\r\n                  return obj || {};\r\n                }\r\n              }\r\n            };\r\n            angular.extend(config, modal.config);\r\n\r\n            return $uibModal\r\n              .open(config)\r\n              .result\r\n              .then(ModalResultComplete)\r\n              .catch(ModalResultFailed);\r\n\r\n            function ModalResultComplete(response) {\r\n              return response;\r\n            }\r\n\r\n            function ModalResultFailed(reason) {\r\n              if (reason && reason !== \"backdrop click\") {\r\n                return $q.reject();\r\n              }\r\n            }\r\n          };\r\n        });\r\n        return _ret;\r\n      }\r\n    }\r\n  }\r\n\r\n}());\r\n;/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app._common')\r\n    .provider('configHelper', configHelperProvider);\r\n\r\n  configHelperProvider.$inject = [];\r\n\r\n  function configHelperProvider() {\r\n    /* jshint validthis:true */\r\n    this.$get = ConfigHelper;\r\n\r\n    // $locationProvider.html5Mode(true);\r\n\r\n    ConfigHelper.$inject = [];\r\n\r\n    function ConfigHelper() {\r\n\r\n      var service = {\r\n        notifyConfig: notifyConfig\r\n      };\r\n\r\n      return service;\r\n\r\n      //function notifyConfig() {}\r\n      function notifyConfig(configName, message) {\r\n        message = message || {};\r\n        console.log(\"%c CONFIG - \" + configName + \" \", 'background: #9C27B0; color: #FFF', message);\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n}());\r\n;/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app._common')\r\n    .filter('numberFixedLen', numberFixedLen)\r\n\r\n  numberFixedLen.$inject = []\r\n\r\n  function numberFixedLen() {\r\n    return function(a, b) {\r\n      return (1e4 + a + \"\").slice(-b)\r\n    }\r\n  }\r\n}());\r\n;/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app._common')\r\n    .filter('fromNow', fromNow)\r\n\r\n  fromNow.$inject = []\r\n\r\n  function fromNow() {\r\n    return function(date) {\r\n      return moment(date).fromNow();\r\n    }\r\n  }\r\n}());\r\n;/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app._common')\r\n    .filter('fileicon', fileicon)\r\n\r\n  fileicon.$inject = []\r\n\r\n  function fileicon() {\r\n    var _icons = {\r\n      \"application/pdf\": \"fa-file-pdf-o\",\r\n      \"application/powerpoint\": \"fa-file-powerpoint-o\",\r\n      \"application/x-msword\": \"fa-file-word-o\",\r\n      \"application/x-msexcel\": \"fa-file-excel-o\",\r\n      \"application/x-mspowerpoint\": \"fa-file-powerpoint-o\",\r\n      \"audio/x-mpeg-3\": \"fa-file-audio-o\",\r\n      \"image/gif\": \"fa-file-image-o\",\r\n      \"image/png\": \"fa-file-image-o\",\r\n      \"image/tiff\": \"fa-file-image-o\",\r\n      \"image/jpeg\": \"fa-file-image-o\",\r\n      \"video/avi\": \"fa-file-video-o\",\r\n      \"video/mpeg\": \"fa-file-video-o\",\r\n      \"video/msvideo\": \"fa-file-video-o\",\r\n      \"video/quicktime\": \"fa-file-video-o\",\r\n      \"application/zip\": \"fa-file-zip-o\"\r\n    };\r\n    return function(a) {\r\n      return _icons[a] || \"fa-file-o\";\r\n    }\r\n  }\r\n}());\r\n;/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app._common')\r\n    .filter('bytes', bytes)\r\n\r\n  bytes.$inject = []\r\n\r\n  function bytes() {\r\n    return function(bytes, precision) {\r\n      if (isNaN(parseFloat(bytes)) || !isFinite(bytes)) return '-';\r\n      if (typeof precision === 'undefined') precision = 1;\r\n      var units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'],\r\n        number = Math.floor(Math.log(bytes) / Math.log(1024));\r\n      return (bytes / Math.pow(1024, Math.floor(number))).toFixed(precision) + ' ' + units[number];\r\n    }\r\n  }\r\n}());\r\n;/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app._common')\r\n    .directive('ngPrint', ngPrint)\r\n\r\n  ngPrint.$inject = []\r\n\r\n  function ngPrint() {\r\n    var printSection = document.getElementById('printSection');\r\n    // if there is no printing section, create one\r\n    if (!printSection) {\r\n      printSection = document.createElement('div');\r\n      printSection.id = 'printSection';\r\n      document.body.appendChild(printSection);\r\n    }\r\n\r\n    function link(scope, element, attrs) {\r\n\r\n      element.on('click', function() {\r\n        var elemToPrint = document.getElementById(attrs.printElementId);\r\n        if (elemToPrint) {\r\n          printElement(elemToPrint);\r\n        }\r\n      });\r\n\r\n      var beforePrint = function() {\r\n        console.log('Functionality to run before printing.');\r\n      };\r\n      var afterPrint = function() {\r\n        console.log('Functionality to run after printing');\r\n          printSection.innerHTML = '';\r\n      };\r\n\r\n      if (window.matchMedia) {\r\n        var mediaQueryList = window.matchMedia('print');\r\n        mediaQueryList.addListener(function(mql) {\r\n          if (mql.matches) {\r\n            beforePrint();\r\n          } else {\r\n            afterPrint();\r\n          }\r\n        });\r\n      }\r\n\r\n      window.onbeforeprint = beforePrint;\r\n      window.onafterprint = afterPrint;\r\n\r\n    }\r\n\r\n    function printElement(elem) {\r\n      // clones the element you want to print\r\n      var domClone = elem.cloneNode(true);\r\n      printSection.appendChild(domClone);\r\n      window.print();\r\n    }\r\n    return {\r\n      link: link,\r\n      restrict: 'A'\r\n    };\r\n  }\r\n\r\n}());\r\n;/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app._common')\r\n    .directive('errSrc', errSrc)\r\n\r\n  errSrc.$inject = []\r\n\r\n  function errSrc() {\r\n    return {\r\n      link: function(scope, element, attrs) {\r\n        if(!attrs.ngSrc){\r\n          attrs.$set('src', attrs.errSrc);\r\n        }\r\n\r\n        element.bind('error', function() {\r\n\r\n          if (attrs.errSrc == \"REMOVE\") {\r\n            element.remove();\r\n            return;\r\n          }\r\n          if (attrs.src != attrs.errSrc) {\r\n            attrs.$set('src', attrs.errSrc);\r\n          }\r\n        });\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n}());\r\n;/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app._common')\r\n    .run(PermissionsConfig);\r\n\r\n  /* @ngInject */\r\n  function PermissionsConfig(configHelper, Permission, AuthService) {\r\n\r\n    Permission.defineRole('Anonymous', function() {\r\n      return !AuthService.AuthObj;\r\n    });\r\n\r\n    configHelper.notifyConfig(\"Permissions\", \"Loaded\");\r\n\r\n  }\r\n  PermissionsConfig.$inject = [\"configHelper\", \"Permission\", \"AuthService\"];\r\n\r\n}());\r\n;/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app._common')\r\n    .config(LocationConfig);\r\n\r\n  /* @ngInject */\r\n  function LocationConfig(configHelperProvider, $locationProvider) {\r\n    $locationProvider.html5Mode(true);\r\n\r\n    configHelperProvider.$get().notifyConfig(\"Location HTML5\", true);\r\n  }\r\n  LocationConfig.$inject = [\"configHelperProvider\", \"$locationProvider\"];\r\n\r\n}());\r\n;/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app._common')\r\n    .config(LocationConfig);\r\n\r\n  /* @ngInject */\r\n  function LocationConfig($httpProvider) {\r\n    $httpProvider.defaults.withCredentials = true;\r\n  }\r\n  LocationConfig.$inject = [\"$httpProvider\"];\r\n\r\n}());\r\n;/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app._common')\r\n    .config(AnalyticsConfig);\r\n\r\n  /* @ngInject */\r\n  function AnalyticsConfig(configHelperProvider, AnalyticsProvider) {\r\n\r\n    var GoogleTrackCode = \"UA-4623228-21\";\r\n\r\n    AnalyticsProvider.setAccount(GoogleTrackCode);\r\n\r\n    AnalyticsProvider.trackUrlParams(true);\r\n    AnalyticsProvider.ignoreFirstPageLoad(true);\r\n    AnalyticsProvider.setPageEvent('$stateChangeSuccess');\r\n\r\n    configHelperProvider.$get().notifyConfig(\"Google Analytics\", GoogleTrackCode);\r\n\r\n  }\r\n  AnalyticsConfig.$inject = [\"configHelperProvider\", \"AnalyticsProvider\"];\r\n\r\n}());\r\n;(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.settings', []);\r\n})();\r\n;(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.settings')\r\n    .controller('SettingsController', SettingsController);\r\n\r\n  /* @ngInject */\r\n  function SettingsController(SettingsService, toaster) {\r\n    var vm = this;\r\n\r\n    activate();\r\n\r\n    function activate() {\r\n    }\r\n\r\n\r\n  }\r\n  SettingsController.$inject = [\"SettingsService\", \"toaster\"];\r\n})();\r\n;(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.participants', []);\r\n})();\r\n;(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.participants')\r\n    .controller('ParticipantsController', ParticipantsController);\r\n\r\n  /* @ngInject */\r\n  function ParticipantsController(ParticipantsService, ParticipantsModals, toaster, $state) {\r\n    var vm = this;\r\n\r\n    vm.AddPList = AddPList;\r\n    vm.ViewPList = ViewPList;\r\n    vm.DeletePList = DeletePList;\r\n    vm.LoadPLists = LoadPLists;\r\n\r\n    activate();\r\n\r\n    function activate() {\r\n      vm.LoadPLists();\r\n    }\r\n\r\n    function LoadPLists() {\r\n      vm.loading = true;\r\n      ParticipantsService\r\n        .GetPLists()\r\n        .then(function(data) {\r\n          vm.PLists = data;\r\n        })\r\n        .finally(function() {\r\n          vm.loading = false;\r\n        });\r\n    }\r\n\r\n    function AddPList() {\r\n      ParticipantsModals\r\n        .PListForm()\r\n        .then(function() {\r\n          vm.LoadPLists();\r\n        });\r\n    }\r\n\r\n    function ViewPList(PList) {\r\n      ParticipantsModals\r\n        .PListForm({\r\n          ID: PList._id\r\n        })\r\n        .then(function() {\r\n          vm.LoadPLists();\r\n        });\r\n    }\r\n\r\n    function DeletePList(PList) {\r\n      ParticipantsService\r\n        .DeletePList(PList)\r\n        .then(function() {\r\n          vm.LoadPLists();\r\n        });\r\n    }\r\n\r\n  }\r\n  ParticipantsController.$inject = [\"ParticipantsService\", \"ParticipantsModals\", \"toaster\", \"$state\"];\r\n})();\r\n;(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.participants')\r\n    .controller(\"PListFormController\", PListFormController);\r\n\r\n  /* @ngInject */\r\n  function PListFormController($modalInstance, ModalParams, ParticipantsService) {\r\n    var vm = this;\r\n\r\n    vm.PList = {\r\n      Participants: [],\r\n    };\r\n\r\n    vm.AddParticipants = AddParticipants;\r\n    vm.RemoveParticipant = RemoveParticipant;\r\n    vm.Save = Save;\r\n\r\n    activate();\r\n\r\n    function activate() {\r\n      if (ModalParams.ID) {\r\n        vm.loading = true;\r\n        ParticipantsService\r\n          .GetPList(ModalParams.ID)\r\n          .then(function(data) {\r\n            vm.PList = data;\r\n            if (vm.PList.Participants.length === 0) {\r\n              vm.AddParticipants();\r\n            }\r\n          })\r\n          .finally(function() {\r\n            vm.loading = false;\r\n          });\r\n      } else {\r\n        vm.AddParticipants();\r\n      }\r\n    }\r\n\r\n    function AddParticipants() {\r\n      for (var i = 0; i < 5; i++) {\r\n        vm.PList.Participants.push({});\r\n      }\r\n    }\r\n\r\n    function RemoveParticipant(index) {\r\n      vm.PList.Participants.splice(index, 1);\r\n    }\r\n\r\n    function Save() {\r\n      ParticipantsService\r\n        .SavePList(vm.PList)\r\n        .then(function() {\r\n          $modalInstance.close();\r\n        });\r\n    }\r\n\r\n\r\n  }\r\n  PListFormController.$inject = [\"$modalInstance\", \"ModalParams\", \"ParticipantsService\"];\r\n\r\n}());\r\n;(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.lotteries', []);\r\n})();\r\n;(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.lotteries')\r\n    .controller('LotteriesController', LotteriesController);\r\n\r\n  /* @ngInject */\r\n  function LotteriesController(LotteriesService, LotteriesModals, toaster, $state) {\r\n    var vm = this;\r\n\r\n    vm.AddLottery = AddLottery;\r\n    vm.DeleteLottery = DeleteLottery;\r\n    vm.LoadLotteries = LoadLotteries;\r\n    vm.FetchPrevious = FetchPrevious;\r\n    vm.FetchNext = FetchNext;\r\n\r\n    activate();\r\n\r\n    function activate() {\r\n      vm.LoadLotteries()\r\n        .then(function() {\r\n          vm.HasPages = LotteriesService.HasPages();\r\n        });\r\n    }\r\n\r\n    function FetchPrevious() {\r\n      if (vm.HasPages.Previous) {\r\n        LotteriesService.PreviousPage();\r\n        vm.HasPages = LotteriesService.HasPages();\r\n        vm.LoadLotteries();\r\n      }\r\n    }\r\n\r\n    function FetchNext() {\r\n      if (vm.HasPages.Next) {\r\n        LotteriesService.NextPage();\r\n        vm.HasPages = LotteriesService.HasPages();\r\n        vm.LoadLotteries();\r\n      }\r\n    }\r\n\r\n    function LoadLotteries() {\r\n      vm.loading = true;\r\n      return LotteriesService\r\n        .GetLotteries()\r\n        .then(function(data) {\r\n          vm.Lotteries = data;\r\n        })\r\n        .finally(function() {\r\n          vm.loading = false;\r\n        });\r\n    }\r\n\r\n    function AddLottery() {\r\n      LotteriesModals\r\n        .LotteryInit()\r\n        .then(function(id) {\r\n          if (id) {\r\n            $state.go(\"app.lotteries.lottery\", {\r\n              ID: id\r\n            });\r\n          }\r\n        });\r\n    }\r\n\r\n    function DeleteLottery(lottery) {\r\n      LotteriesService\r\n        .DeleteLottery(lottery)\r\n        .then(function() {\r\n          vm.LoadLotteries();\r\n        });\r\n    }\r\n\r\n  }\r\n  LotteriesController.$inject = [\"LotteriesService\", \"LotteriesModals\", \"toaster\", \"$state\"];\r\n})();\r\n;(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.lotteries')\r\n    .controller('LotteryController', LotteryController);\r\n\r\n  /* @ngInject */\r\n  function LotteryController(LotteriesService, $stateParams, toaster) {\r\n    var vm = this;\r\n\r\n    vm.LoadLottery = LoadLottery;\r\n\r\n    activate();\r\n\r\n    function activate() {\r\n      vm.LoadLottery();\r\n    }\r\n\r\n    function LoadLottery() {\r\n      vm.loading = true;\r\n      LotteriesService\r\n        .GetLottery($stateParams.ID)\r\n        .then(function(data) {\r\n          vm.Lottery = data;\r\n        })\r\n        .finally(function() {\r\n          vm.loading = false;\r\n        });\r\n    }\r\n\r\n  }\r\n  LotteryController.$inject = [\"LotteriesService\", \"$stateParams\", \"toaster\"];\r\n})();\r\n;(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.lotteries')\r\n    .controller(\"LotteryInitController\", LotteryInitController);\r\n\r\n  /* @ngInject */\r\n  function LotteryInitController($modalInstance, ModalParams, LotteriesService,ParticipantsService) {\r\n    var vm = this;\r\n\r\n    vm.Lottery = {\r\n      Name: \"Lottery #\" + Math.floor((Math.random() * 99999) + 10000),\r\n    };\r\n\r\n    vm.LoadPLists = LoadPLists;\r\n    vm.Save = Save;\r\n\r\n    activate();\r\n\r\n    function activate() {\r\n      vm.LoadPLists();\r\n    }\r\n\r\n    function LoadPLists() {\r\n      vm.loading = true;\r\n      ParticipantsService\r\n        .GetPLists()\r\n        .then(function(data) {\r\n          vm.PLists = data;\r\n        })\r\n        .finally(function() {\r\n          vm.loading = false;\r\n        });\r\n    }\r\n\r\n    function Save() {\r\n      LotteriesService\r\n        .SaveLottery(vm.Lottery)\r\n        .then(function(resp) {\r\n          $modalInstance.close(resp.id);\r\n        });\r\n    }\r\n\r\n\r\n  }\r\n  LotteryInitController.$inject = [\"$modalInstance\", \"ModalParams\", \"LotteriesService\", \"ParticipantsService\"];\r\n\r\n}());\r\n;/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.auth', [])\r\n\r\n}());\r\n;(function() {\n  'use strict';\n\n  angular\n    .module('app.auth')\n    .controller('AuthLoginController', AuthLoginController);\n\n  /* @ngInject */\n  function AuthLoginController(AuthService, $stateParams, $state, LoginMessages, User) {\n    var vm = this;\n\n    vm.loading = false;\n    vm.SignIn = SignIn;\n\n    activate();\n\n    function activate() {\n\n      switch ($stateParams.ref) {\n        case \"au\": //Unauthorized\n          vm.Alert = LoginMessages.UNAUTHORIZED;\n          break;\n        case \"so\": //Sign Out\n          vm.Alert = LoginMessages.SIGNOUT;\n          break;\n        case \"re\": //registered\n          vm.Alert = LoginMessages.REGISTERED;\n          break;\n        default:\n          break;\n      }\n\n    }\n\n    function SignIn() {\n\n      vm.loading = true;\n      vm.Alert = false;\n\n      User\n        .login(vm.credentials)\n        .$promise\n        .then(function(response) {\n          $state.go(\"app.lotteries.overview\");\n        }, function(rejection) {\n          console.log(\"rejection\", rejection);\n          vm.Alert = LoginMessages[rejection.error.toUpperCase()];\n        })\n        .finally(function() {\n          vm.loading = false;\n        });\n      // AuthService\n      //   .SignIn(vm.credentials)\n      //   .then(function(response) {\n      //     $state.go(\"app.lotteries.overview\");\n      //   }, function(rejection) {\n      //     console.log(rejection);\n      //     vm.Alert = LoginMessages[rejection.error.toUpperCase()];\n      //   })\n      //   .finally(function() {\n      //     vm.loading = false;\n      //   });\n    }\n\n  }\r\n  AuthLoginController.$inject = [\"AuthService\", \"$stateParams\", \"$state\", \"LoginMessages\", \"User\"];\n\n}());\n;/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app._common')\r\n    .run(RoutesConfig);\r\n\r\n  RoutesConfig.$inject = ['configHelper', 'routerHelper'];\r\n\r\n  function RoutesConfig(configHelper, routerHelper) {\r\n\r\n    var _states = getStates();\r\n    routerHelper.configureStates(_states, \"/\");\r\n\r\n    configHelper.notifyConfig(\"Basic Routes\", _.map(_states, function(_state) {\r\n      return _state.state;\r\n    }));\r\n\r\n  }\r\n\r\n  function getStates() {\r\n    return [{\r\n      state: 'app',\r\n      config: {\r\n        abstract: true,\r\n        templateUrl: 'src/_common/views/layout.html',\r\n        controller: function($scope, AuthService) {\r\n          $scope.username = AuthService.AuthObj.username;\r\n        }\r\n      }\r\n    }];\r\n  }\r\n\r\n}());\r\n;/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.settings')\r\n    .factory('SettingsService', SettingsService);\r\n\r\n  /* @ngInject */\r\n  function SettingsService($resource) {\r\n\r\n    var service = {\r\n      GetSettings: GetSettings,\r\n      GetSetting: GetSetting,\r\n      SaveSetting: SaveSetting,\r\n      DeleteSetting: DeleteSetting,\r\n    }\r\n\r\n    return service;\r\n\r\n    function GetSettings(params) {\r\n      return $resource(APP.Service + \"_design/models/_view/Settings\")\r\n        .get()\r\n        .$promise\r\n        .then(function(data) {\r\n          return _.chain(data.rows)\r\n            .map(function(item) {\r\n              return item.value;\r\n            })\r\n            .sortBy(function(item) {\r\n              return item.DrewAt || 0;\r\n            })\r\n            .reverse()\r\n            .value();\r\n        });\r\n    }\r\n\r\n    function GetSetting(id) {\r\n      return $resource(APP.Service + id)\r\n        .get()\r\n        .$promise\r\n        .then(function(data) {\r\n          return data;\r\n        });\r\n    }\r\n\r\n    function SaveSetting(Setting) {\r\n      Setting.Type = \"Setting\";\r\n      return $resource(APP.Service)\r\n        .save(Setting)\r\n        .$promise\r\n        .then(function(data) {\r\n          return data;\r\n        });\r\n    }\r\n\r\n    function DeleteSetting(Setting) {\r\n\r\n      Setting._deleted = true;\r\n      Setting.DeletedAt = new Date();\r\n\r\n      return $resource(APP.Service)\r\n        .save(Setting)\r\n        .$promise;\r\n    }\r\n\r\n  }\r\n  SettingsService.$inject = [\"$resource\"];\r\n}());\r\n;(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.settings')\r\n    .run(appRun);\r\n\r\n  appRun.$inject = ['routerHelper'];\r\n\r\n  function appRun(routerHelper) {\r\n    routerHelper.configureStates(getStates());\r\n  }\r\n\r\n  function getStates() {\r\n    return [{\r\n      state: 'app.settings',\r\n      config: {\r\n        url: '/settings',\r\n        controller: \"SettingsController\",\r\n        templateUrl: 'src/settings/overview/view.html',\r\n        data: {\r\n          permissions: {\r\n            except: ['Anonymous'],\r\n            redirectTo: \"auth.login\"\r\n          }\r\n        }\r\n      }\r\n    }];\r\n  }\r\n\r\n}());\r\n;/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.participants')\r\n    .factory('ParticipantsService', ParticipantsService);\r\n\r\n  /* @ngInject */\r\n  function ParticipantsService($resource) {\r\n\r\n    var service = {\r\n      GetPLists: GetPLists,\r\n      GetPList: GetPList,\r\n      SavePList: SavePList,\r\n      DeletePList: DeletePList,\r\n    }\r\n\r\n    return service;\r\n\r\n    function GetPLists(params) {\r\n      return $resource(APP.Service + \"_design/models/_view/plists\")\r\n        .get()\r\n        .$promise\r\n        .then(function(data) {\r\n          return _.chain(data.rows)\r\n            .map(function(item) {\r\n              return item.value;\r\n            })\r\n            .sortBy(function(item) {\r\n              return item.Name;\r\n            })\r\n            .reverse()\r\n            .value();\r\n        });\r\n    }\r\n\r\n    function GetPList(id) {\r\n      return $resource(APP.Service + id)\r\n        .get()\r\n        .$promise\r\n        .then(function(data) {\r\n          return data;\r\n        });\r\n    }\r\n\r\n\r\n    function SavePList(PList) {\r\n\r\n      if (!PList._id) {\r\n        PList.Type = \"PList\";\r\n        PList.CreatedAt = new Date();\r\n      }\r\n\r\n      PList.Participants = _.filter(PList.Participants, function(item) {\r\n        return (item.Name || item.Email);\r\n      });\r\n\r\n      return $resource(APP.Service)\r\n        .save(PList)\r\n        .$promise\r\n        .then(function(data) {\r\n          return data;\r\n        });\r\n    }\r\n\r\n    function DeletePList(PList) {\r\n\r\n      PList._deleted = true;\r\n      PList.DeletedAt = new Date();\r\n\r\n      return $resource(APP.Service)\r\n        .save(PList)\r\n        .$promise;\r\n    }\r\n\r\n  }\r\n  ParticipantsService.$inject = [\"$resource\"];\r\n}());\r\n;(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.participants')\r\n    .run(appRun);\r\n\r\n  appRun.$inject = ['routerHelper'];\r\n\r\n  function appRun(routerHelper) {\r\n    routerHelper.configureStates(getStates());\r\n  }\r\n\r\n  function getStates() {\r\n    return [{\r\n      state: 'app.participants',\r\n      config: {\r\n        abstract: true,\r\n        template: '<ui-view/>',\r\n        data: {\r\n          permissions: {\r\n            except: ['Anonymous'],\r\n            redirectTo: \"auth.login\"\r\n          }\r\n        }\r\n      }\r\n    }, {\r\n      state: 'app.participants.overview',\r\n      config: {\r\n        url: '/participants',\r\n        controller: \"ParticipantsController\",\r\n        templateUrl: 'src/participants/overview/view.html',\r\n      }\r\n    }, {\r\n      state: 'app.participants.item',\r\n      config: {\r\n        url: '/participant/:ID',\r\n        controller: \"ParticipantController\",\r\n        templateUrl: 'src/participants/item/view.html',\r\n      }\r\n    }];\r\n  }\r\n\r\n}());\r\n;/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.participants')\r\n    .factory('ParticipantsModals', ParticipantsModals);\r\n\r\n  ParticipantsModals.$inject = ['modalHelper'];\r\n\r\n  function ParticipantsModals(modalHelper) {\r\n    return modalHelper.configureModals(getModals());\r\n\r\n    function getModals() {\r\n      return [{\r\n        modal: \"PListForm\",\r\n        config: {\r\n          templateUrl: 'src/participants/form/view.html',\r\n          controller: \"PListFormController\",\r\n          size: \"md\",\r\n          backdrop: 'static',\r\n        }\r\n      }];\r\n    }\r\n  }\r\n\r\n}());\r\n;/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.lotteries')\r\n    .factory('LotteriesService', LotteriesService);\r\n\r\n  /* @ngInject */\r\n  function LotteriesService($resource) {\r\n\r\n    var service = {\r\n      _total: null,\r\n      _limit: 10,\r\n      _offset: 0,\r\n      GetLotteries: GetLotteries,\r\n      GetLottery: GetLottery,\r\n      SaveLottery: SaveLottery,\r\n      DeleteLottery: DeleteLottery,\r\n      NextPage: NextPage,\r\n      PreviousPage: PreviousPage,\r\n      HasPages: HasPages,\r\n    }\r\n\r\n    return service;\r\n\r\n    function NextPage() {\r\n      service._offset = ((service._offset / service._limit) + 1) * service._limit;\r\n    }\r\n\r\n    function PreviousPage() {\r\n      service._offset = ((service._offset / service._limit) - 1) * service._limit;\r\n    }\r\n\r\n    function HasPages() {\r\n      return {\r\n        Previous: (service._offset !== 0),\r\n        Next: (service._total - service._offset > service._limit),\r\n      }\r\n    }\r\n\r\n    function GetLotteries() {\r\n\r\n      return $resource(APP.Service + \"_design/models/_view/lotteries\")\r\n        .get({\r\n          limit: service._limit,\r\n          skip: service._offset,\r\n        })\r\n        .$promise\r\n        .then(function(data) {\r\n          service._total = data.total_rows;\r\n          return _.chain(data.rows)\r\n            .map(function(item) {\r\n              return item.value;\r\n            })\r\n            .sortBy(function(item) {\r\n              return item.DrewAt || 0;\r\n            })\r\n            .reverse()\r\n            .value();\r\n        });\r\n    }\r\n\r\n\r\n    function GetLottery(id) {\r\n      return $resource(APP.Service + id)\r\n        .get()\r\n        .$promise\r\n        .then(function(data) {\r\n          return data;\r\n        });\r\n    }\r\n\r\n    function SaveLottery(lottery) {\r\n\r\n      lottery.Type = \"Lottery\";\r\n      lottery.DrewAt = new Date();\r\n      lottery.Participants = _.shuffle(lottery.Participants);\r\n\r\n      return $resource(APP.Service)\r\n        .save(lottery)\r\n        .$promise\r\n        .then(function(data) {\r\n          return data;\r\n        });\r\n    }\r\n\r\n    function DeleteLottery(lottery) {\r\n\r\n      lottery._deleted = true;\r\n      lottery.DeletedAt = new Date();\r\n\r\n      return $resource(APP.Service)\r\n        .save(lottery)\r\n        .$promise;\r\n    }\r\n\r\n  }\r\n  LotteriesService.$inject = [\"$resource\"];\r\n}());\r\n;(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.lotteries')\r\n    .run(appRun);\r\n\r\n  appRun.$inject = ['routerHelper'];\r\n\r\n  function appRun(routerHelper) {\r\n    routerHelper.configureStates(getStates());\r\n  }\r\n\r\n  function getStates() {\r\n    return [{\r\n      state: 'app.lotteries',\r\n      config: {\r\n        abstract: true,\r\n        template: '<ui-view/>',\r\n        data: {\r\n          permissions: {\r\n            except: ['Anonymous'],\r\n            redirectTo: \"auth.login\"\r\n          }\r\n        }\r\n      }\r\n    }, {\r\n      state: 'app.lotteries.overview',\r\n      config: {\r\n        url: '/',\r\n        controller: \"LotteriesController\",\r\n        templateUrl: 'src/lotteries/overview/view.html',\r\n      }\r\n    }, {\r\n      state: 'app.lotteries.lottery',\r\n      config: {\r\n        url: '/lottery/:ID',\r\n        controller: \"LotteryController\",\r\n        templateUrl: 'src/lotteries/lottery/view.html',\r\n      }\r\n    }];\r\n  }\r\n\r\n}());\r\n;/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.lotteries')\r\n    .factory('LotteriesModals', LotteriesModals);\r\n\r\n  LotteriesModals.$inject = ['modalHelper'];\r\n\r\n  function LotteriesModals(modalHelper) {\r\n    return modalHelper.configureModals(getModals());\r\n\r\n    function getModals() {\r\n      return [{\r\n        modal: \"LotteryInit\",\r\n        config: {\r\n          templateUrl: 'src/lotteries/init/view.html',\r\n          controller: \"LotteryInitController\",\r\n          size: \"sm\"\r\n        }\r\n      }];\r\n    }\r\n  }\r\n\r\n}());\r\n;/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.auth')\r\n    .factory('AuthService', AuthService);\r\n\r\n  /* @ngInject */\r\n  function AuthService($http, $q, $cookies) {\r\n    var service = {\r\n      AuthObj: false,\r\n\r\n      Init: Init,\r\n      SignIn: SignIn,\r\n      SignOut: SignOut,\r\n    }\r\n\r\n    return service;\r\n\r\n    function Init() {\r\n\r\n      var AuthObj = $cookies.getObject('AuthObj');\r\n      if (AuthObj) {\r\n        service.isAuth = true;\r\n        service.AuthObj = AuthObj;\r\n      }\r\n\r\n    }\r\n\r\n    function SignIn(credentials) {\r\n\r\n      var deferred = $q.defer();\r\n\r\n      $http\r\n        .post(APP.CouchServer + '_session', {\r\n          name: credentials.username,\r\n          password: credentials.password,\r\n        }, {\r\n          IsSignIn: true\r\n        })\r\n        .then(function(response) {\r\n          var AuthObj = {\r\n            username: credentials.username\r\n          }\r\n          $cookies.putObject('AuthObj', AuthObj);\r\n          service.AuthObj = AuthObj;\r\n          deferred.resolve();\r\n        }, function(rejection) {\r\n          deferred.reject(rejection.data);\r\n        });\r\n\r\n      return deferred.promise;\r\n    }\r\n\r\n    function SignOut() {\r\n      $cookies.remove('AuthObj');\r\n      $http.delete(APP.CouchServer + '_session');\r\n      service.AuthObj = false;\r\n    }\r\n\r\n  }\r\n  AuthService.$inject = [\"$http\", \"$q\", \"$cookies\"];\r\n\r\n}());\r\n;/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.auth')\r\n    .run(appRun);\r\n\r\n  appRun.$inject = ['routerHelper'];\r\n\r\n  function appRun(routerHelper) {\r\n    routerHelper.configureStates(getStates());\r\n  }\r\n\r\n  function getStates() {\r\n    return [{\r\n      state: 'auth',\r\n      config: {\r\n        abstract: true,\r\n        template: '<ui-view/>',\r\n      }\r\n    }, {\r\n      state: 'auth.login',\r\n      config: {\r\n        url: '/login',\r\n        params: {\r\n          ref: null\r\n        },\r\n        templateUrl: \"src/auth/login/view.html\",\r\n        controller: \"AuthLoginController\",\r\n        data: {\r\n          permissions: {\r\n            only: ['Anonymous'],\r\n            redirectTo: \"app.lotteries.overview\"\r\n          }\r\n        }\r\n      }\r\n    }, {\r\n      state: 'auth.logout',\r\n      config: {\r\n        url: '/logout',\r\n        template: \"<ui-view/>\",\r\n        controller: function(AuthService, $state) {\r\n          AuthService.SignOut();\r\n          $state.go(\"auth.login\", {\r\n            ref: \"so\"\r\n          });\r\n        },\r\n      }\r\n    }];\r\n  }\r\n\r\n}());\r\n;/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.auth')\r\n    .config(AuthInterceptorConfig)\r\n    .factory('AuthInterceptor', AuthInterceptor);\r\n\r\n  /* @ngInject */\r\n  function AuthInterceptor($q, $injector,$cookies) {\r\n\r\n    return {\r\n      responseError: function(rejection) {\r\n        // console.log(rejection);\r\n        if (rejection.status === 401 && !rejection.config.IsSignIn) {\r\n          var AuthService = $injector.get('AuthService');\r\n          AuthService.SignOut();\r\n          var $state = $injector.get('$state');\r\n          $state.go('auth.login', {\r\n            ref: \"au\"\r\n          });\r\n        }\r\n        return $q.reject(rejection);\r\n      }\r\n    };\r\n\r\n  }\r\n  AuthInterceptor.$inject = [\"$q\", \"$injector\", \"$cookies\"];\r\n\r\n  /* @ngInject */\r\n  function AuthInterceptorConfig($httpProvider) {\r\n    $httpProvider.interceptors.push(\"AuthInterceptor\");\r\n  }\r\n  AuthInterceptorConfig.$inject = [\"$httpProvider\"];\r\n\r\n}());\r\n;(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.auth')\r\n    .constant('LoginMessages', {\r\n      ANAUTHORIZED: {\r\n        Type: \"danger\",\r\n        Message: \"You were signed out\",\r\n        Details: \"Probably your session was timed out\",\r\n      },\r\n      SIGNOUT: {\r\n        Type: \"success\",\r\n        Message: \"You were signed out successfully\",\r\n        Details: \"You may login again using the form\",\r\n      },\r\n      REGISTERED: {\r\n        Type: \"success\",\r\n        Message: \"Your account is ready, you can login now\",\r\n        Details: false,\r\n      },\r\n      AUTHERROR: {\r\n        Type: \"danger\",\r\n        Message: \"Authentication Error\",\r\n        Details: null,\r\n      },\r\n      UNAVAILABLE: {\r\n        Type: \"danger\",\r\n        Message: \"Service is not available\",\r\n        Details: \"Please try again later. If the problem insist, contact your system administrator\",\r\n      },\r\n      UNAUTHORIZED: {\r\n        Type: \"danger\",\r\n        Message: \"Name or password is incorrect\",\r\n        Details: \"Please try again\",\r\n      },\r\n    });\r\n\r\n}());\r\n;(function() {\r\n  'use strict';\r\n\r\n  angular.module('app', [\r\n\r\n    'app.auth',\r\n    'app.lotteries',\r\n    'app.participants',\r\n    'app.settings',\r\n    'app._common',\r\n\r\n\r\n  ]);\r\n\r\n}());\r\n;/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app')\r\n    .run(appRun);\r\n\r\n  /* @ngInject */\r\n  function appRun($rootScope, $state, $stateParams, AuthService) {\r\n\r\n    AuthService.Init();\r\n\r\n    $rootScope.APP = APP;\r\n\r\n    $rootScope.$on('$stateChangeStart', function(evt, to, params) {\r\n\r\n      if (to.redirectTo) {\r\n        evt.preventDefault();\r\n        $state.go(to.redirectTo, params);\r\n      }\r\n    });\r\n\r\n\r\n  }\r\n  appRun.$inject = [\"$rootScope\", \"$state\", \"$stateParams\", \"AuthService\"];\r\n\r\n}());\r\n;/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  var _domain = window.location.hostname.split(\".\").shift();\r\n  window.APP = {\r\n    Project: \"PicoLotteries\",\r\n    Version: \"0.1.5\",\r\n    Domain: _domain,\r\n    CouchServer: \"//localhost:5984/\",\r\n    Database: \"picolottery_\" + _domain,\r\n  };\r\n  window.APP.Service = window.APP.CouchServer + window.APP.Database + \"/\";\r\n\r\n  angular.element(document).ready(function() {\r\n    angular.bootstrap(document, [\"app\"]);\r\n  });\r\n\r\n})();\r\n","/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app._common')\r\n    .config(LocationConfig);\r\n\r\n  /* @ngInject */\r\n  function LocationConfig(configHelperProvider, $locationProvider) {\r\n    $locationProvider.html5Mode(true);\r\n\r\n    configHelperProvider.$get().notifyConfig(\"Location HTML5\", true);\r\n  }\r\n\r\n}());\r\n","/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app._common')\r\n    .config(LocationConfig);\r\n\r\n  /* @ngInject */\r\n  function LocationConfig($httpProvider) {\r\n    $httpProvider.defaults.withCredentials = true;\r\n  }\r\n\r\n}());\r\n","/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app._common')\r\n    .config(AnalyticsConfig);\r\n\r\n  /* @ngInject */\r\n  function AnalyticsConfig(configHelperProvider, AnalyticsProvider) {\r\n\r\n    var GoogleTrackCode = \"UA-4623228-21\";\r\n\r\n    AnalyticsProvider.setAccount(GoogleTrackCode);\r\n\r\n    AnalyticsProvider.trackUrlParams(true);\r\n    AnalyticsProvider.ignoreFirstPageLoad(true);\r\n    AnalyticsProvider.setPageEvent('$stateChangeSuccess');\r\n\r\n    configHelperProvider.$get().notifyConfig(\"Google Analytics\", GoogleTrackCode);\r\n\r\n  }\r\n\r\n}());\r\n","(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.settings', []);\r\n})();\r\n","(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.settings')\r\n    .controller('SettingsController', SettingsController);\r\n\r\n  /* @ngInject */\r\n  function SettingsController(SettingsService, toaster) {\r\n    var vm = this;\r\n\r\n    activate();\r\n\r\n    function activate() {\r\n    }\r\n\r\n\r\n  }\r\n})();\r\n","(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.participants', []);\r\n})();\r\n","(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.participants')\r\n    .controller('ParticipantsController', ParticipantsController);\r\n\r\n  /* @ngInject */\r\n  function ParticipantsController(ParticipantsService, ParticipantsModals, toaster, $state) {\r\n    var vm = this;\r\n\r\n    vm.AddPList = AddPList;\r\n    vm.ViewPList = ViewPList;\r\n    vm.DeletePList = DeletePList;\r\n    vm.LoadPLists = LoadPLists;\r\n\r\n    activate();\r\n\r\n    function activate() {\r\n      vm.LoadPLists();\r\n    }\r\n\r\n    function LoadPLists() {\r\n      vm.loading = true;\r\n      ParticipantsService\r\n        .GetPLists()\r\n        .then(function(data) {\r\n          vm.PLists = data;\r\n        })\r\n        .finally(function() {\r\n          vm.loading = false;\r\n        });\r\n    }\r\n\r\n    function AddPList() {\r\n      ParticipantsModals\r\n        .PListForm()\r\n        .then(function() {\r\n          vm.LoadPLists();\r\n        });\r\n    }\r\n\r\n    function ViewPList(PList) {\r\n      ParticipantsModals\r\n        .PListForm({\r\n          ID: PList._id\r\n        })\r\n        .then(function() {\r\n          vm.LoadPLists();\r\n        });\r\n    }\r\n\r\n    function DeletePList(PList) {\r\n      ParticipantsService\r\n        .DeletePList(PList)\r\n        .then(function() {\r\n          vm.LoadPLists();\r\n        });\r\n    }\r\n\r\n  }\r\n})();\r\n","(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.participants')\r\n    .controller(\"PListFormController\", PListFormController);\r\n\r\n  /* @ngInject */\r\n  function PListFormController($modalInstance, ModalParams, ParticipantsService) {\r\n    var vm = this;\r\n\r\n    vm.PList = {\r\n      Participants: [],\r\n    };\r\n\r\n    vm.AddParticipants = AddParticipants;\r\n    vm.RemoveParticipant = RemoveParticipant;\r\n    vm.Save = Save;\r\n\r\n    activate();\r\n\r\n    function activate() {\r\n      if (ModalParams.ID) {\r\n        vm.loading = true;\r\n        ParticipantsService\r\n          .GetPList(ModalParams.ID)\r\n          .then(function(data) {\r\n            vm.PList = data;\r\n            if (vm.PList.Participants.length === 0) {\r\n              vm.AddParticipants();\r\n            }\r\n          })\r\n          .finally(function() {\r\n            vm.loading = false;\r\n          });\r\n      } else {\r\n        vm.AddParticipants();\r\n      }\r\n    }\r\n\r\n    function AddParticipants() {\r\n      for (var i = 0; i < 5; i++) {\r\n        vm.PList.Participants.push({});\r\n      }\r\n    }\r\n\r\n    function RemoveParticipant(index) {\r\n      vm.PList.Participants.splice(index, 1);\r\n    }\r\n\r\n    function Save() {\r\n      ParticipantsService\r\n        .SavePList(vm.PList)\r\n        .then(function() {\r\n          $modalInstance.close();\r\n        });\r\n    }\r\n\r\n\r\n  }\r\n\r\n}());\r\n","(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.lotteries', []);\r\n})();\r\n","(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.lotteries')\r\n    .controller('LotteriesController', LotteriesController);\r\n\r\n  /* @ngInject */\r\n  function LotteriesController(LotteriesService, LotteriesModals, toaster, $state) {\r\n    var vm = this;\r\n\r\n    vm.AddLottery = AddLottery;\r\n    vm.DeleteLottery = DeleteLottery;\r\n    vm.LoadLotteries = LoadLotteries;\r\n    vm.FetchPrevious = FetchPrevious;\r\n    vm.FetchNext = FetchNext;\r\n\r\n    activate();\r\n\r\n    function activate() {\r\n      vm.LoadLotteries()\r\n        .then(function() {\r\n          vm.HasPages = LotteriesService.HasPages();\r\n        });\r\n    }\r\n\r\n    function FetchPrevious() {\r\n      if (vm.HasPages.Previous) {\r\n        LotteriesService.PreviousPage();\r\n        vm.HasPages = LotteriesService.HasPages();\r\n        vm.LoadLotteries();\r\n      }\r\n    }\r\n\r\n    function FetchNext() {\r\n      if (vm.HasPages.Next) {\r\n        LotteriesService.NextPage();\r\n        vm.HasPages = LotteriesService.HasPages();\r\n        vm.LoadLotteries();\r\n      }\r\n    }\r\n\r\n    function LoadLotteries() {\r\n      vm.loading = true;\r\n      return LotteriesService\r\n        .GetLotteries()\r\n        .then(function(data) {\r\n          vm.Lotteries = data;\r\n        })\r\n        .finally(function() {\r\n          vm.loading = false;\r\n        });\r\n    }\r\n\r\n    function AddLottery() {\r\n      LotteriesModals\r\n        .LotteryInit()\r\n        .then(function(id) {\r\n          if (id) {\r\n            $state.go(\"app.lotteries.lottery\", {\r\n              ID: id\r\n            });\r\n          }\r\n        });\r\n    }\r\n\r\n    function DeleteLottery(lottery) {\r\n      LotteriesService\r\n        .DeleteLottery(lottery)\r\n        .then(function() {\r\n          vm.LoadLotteries();\r\n        });\r\n    }\r\n\r\n  }\r\n})();\r\n","(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.lotteries')\r\n    .controller('LotteryController', LotteryController);\r\n\r\n  /* @ngInject */\r\n  function LotteryController(LotteriesService, $stateParams, toaster) {\r\n    var vm = this;\r\n\r\n    vm.LoadLottery = LoadLottery;\r\n\r\n    activate();\r\n\r\n    function activate() {\r\n      vm.LoadLottery();\r\n    }\r\n\r\n    function LoadLottery() {\r\n      vm.loading = true;\r\n      LotteriesService\r\n        .GetLottery($stateParams.ID)\r\n        .then(function(data) {\r\n          vm.Lottery = data;\r\n        })\r\n        .finally(function() {\r\n          vm.loading = false;\r\n        });\r\n    }\r\n\r\n  }\r\n})();\r\n","(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.lotteries')\r\n    .controller(\"LotteryInitController\", LotteryInitController);\r\n\r\n  /* @ngInject */\r\n  function LotteryInitController($modalInstance, ModalParams, LotteriesService,ParticipantsService) {\r\n    var vm = this;\r\n\r\n    vm.Lottery = {\r\n      Name: \"Lottery #\" + Math.floor((Math.random() * 99999) + 10000),\r\n    };\r\n\r\n    vm.LoadPLists = LoadPLists;\r\n    vm.Save = Save;\r\n\r\n    activate();\r\n\r\n    function activate() {\r\n      vm.LoadPLists();\r\n    }\r\n\r\n    function LoadPLists() {\r\n      vm.loading = true;\r\n      ParticipantsService\r\n        .GetPLists()\r\n        .then(function(data) {\r\n          vm.PLists = data;\r\n        })\r\n        .finally(function() {\r\n          vm.loading = false;\r\n        });\r\n    }\r\n\r\n    function Save() {\r\n      LotteriesService\r\n        .SaveLottery(vm.Lottery)\r\n        .then(function(resp) {\r\n          $modalInstance.close(resp.id);\r\n        });\r\n    }\r\n\r\n\r\n  }\r\n\r\n}());\r\n","/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.auth', [])\r\n\r\n}());\r\n","(function() {\n  'use strict';\n\n  angular\n    .module('app.auth')\n    .controller('AuthLoginController', AuthLoginController);\n\n  /* @ngInject */\n  function AuthLoginController(AuthService, $stateParams, $state, LoginMessages, User) {\n    var vm = this;\n\n    vm.loading = false;\n    vm.SignIn = SignIn;\n\n    activate();\n\n    function activate() {\n\n      switch ($stateParams.ref) {\n        case \"au\": //Unauthorized\n          vm.Alert = LoginMessages.UNAUTHORIZED;\n          break;\n        case \"so\": //Sign Out\n          vm.Alert = LoginMessages.SIGNOUT;\n          break;\n        case \"re\": //registered\n          vm.Alert = LoginMessages.REGISTERED;\n          break;\n        default:\n          break;\n      }\n\n    }\n\n    function SignIn() {\n\n      vm.loading = true;\n      vm.Alert = false;\n\n      User\n        .login(vm.credentials)\n        .$promise\n        .then(function(response) {\n          $state.go(\"app.lotteries.overview\");\n        }, function(rejection) {\n          console.log(\"rejection\", rejection);\n          vm.Alert = LoginMessages[rejection.error.toUpperCase()];\n        })\n        .finally(function() {\n          vm.loading = false;\n        });\n      // AuthService\n      //   .SignIn(vm.credentials)\n      //   .then(function(response) {\n      //     $state.go(\"app.lotteries.overview\");\n      //   }, function(rejection) {\n      //     console.log(rejection);\n      //     vm.Alert = LoginMessages[rejection.error.toUpperCase()];\n      //   })\n      //   .finally(function() {\n      //     vm.loading = false;\n      //   });\n    }\n\n  }\n\n}());\n","/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app._common')\r\n    .run(RoutesConfig);\r\n\r\n  RoutesConfig.$inject = ['configHelper', 'routerHelper'];\r\n\r\n  function RoutesConfig(configHelper, routerHelper) {\r\n\r\n    var _states = getStates();\r\n    routerHelper.configureStates(_states, \"/\");\r\n\r\n    configHelper.notifyConfig(\"Basic Routes\", _.map(_states, function(_state) {\r\n      return _state.state;\r\n    }));\r\n\r\n  }\r\n\r\n  function getStates() {\r\n    return [{\r\n      state: 'app',\r\n      config: {\r\n        abstract: true,\r\n        templateUrl: 'src/_common/views/layout.html',\r\n        controller: function($scope, AuthService) {\r\n          $scope.username = AuthService.AuthObj.username;\r\n        }\r\n      }\r\n    }];\r\n  }\r\n\r\n}());\r\n","/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.settings')\r\n    .factory('SettingsService', SettingsService);\r\n\r\n  /* @ngInject */\r\n  function SettingsService($resource) {\r\n\r\n    var service = {\r\n      GetSettings: GetSettings,\r\n      GetSetting: GetSetting,\r\n      SaveSetting: SaveSetting,\r\n      DeleteSetting: DeleteSetting,\r\n    }\r\n\r\n    return service;\r\n\r\n    function GetSettings(params) {\r\n      return $resource(APP.Service + \"_design/models/_view/Settings\")\r\n        .get()\r\n        .$promise\r\n        .then(function(data) {\r\n          return _.chain(data.rows)\r\n            .map(function(item) {\r\n              return item.value;\r\n            })\r\n            .sortBy(function(item) {\r\n              return item.DrewAt || 0;\r\n            })\r\n            .reverse()\r\n            .value();\r\n        });\r\n    }\r\n\r\n    function GetSetting(id) {\r\n      return $resource(APP.Service + id)\r\n        .get()\r\n        .$promise\r\n        .then(function(data) {\r\n          return data;\r\n        });\r\n    }\r\n\r\n    function SaveSetting(Setting) {\r\n      Setting.Type = \"Setting\";\r\n      return $resource(APP.Service)\r\n        .save(Setting)\r\n        .$promise\r\n        .then(function(data) {\r\n          return data;\r\n        });\r\n    }\r\n\r\n    function DeleteSetting(Setting) {\r\n\r\n      Setting._deleted = true;\r\n      Setting.DeletedAt = new Date();\r\n\r\n      return $resource(APP.Service)\r\n        .save(Setting)\r\n        .$promise;\r\n    }\r\n\r\n  }\r\n}());\r\n","(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.settings')\r\n    .run(appRun);\r\n\r\n  appRun.$inject = ['routerHelper'];\r\n\r\n  function appRun(routerHelper) {\r\n    routerHelper.configureStates(getStates());\r\n  }\r\n\r\n  function getStates() {\r\n    return [{\r\n      state: 'app.settings',\r\n      config: {\r\n        url: '/settings',\r\n        controller: \"SettingsController\",\r\n        templateUrl: 'src/settings/overview/view.html',\r\n        data: {\r\n          permissions: {\r\n            except: ['Anonymous'],\r\n            redirectTo: \"auth.login\"\r\n          }\r\n        }\r\n      }\r\n    }];\r\n  }\r\n\r\n}());\r\n","/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.participants')\r\n    .factory('ParticipantsService', ParticipantsService);\r\n\r\n  /* @ngInject */\r\n  function ParticipantsService($resource) {\r\n\r\n    var service = {\r\n      GetPLists: GetPLists,\r\n      GetPList: GetPList,\r\n      SavePList: SavePList,\r\n      DeletePList: DeletePList,\r\n    }\r\n\r\n    return service;\r\n\r\n    function GetPLists(params) {\r\n      return $resource(APP.Service + \"_design/models/_view/plists\")\r\n        .get()\r\n        .$promise\r\n        .then(function(data) {\r\n          return _.chain(data.rows)\r\n            .map(function(item) {\r\n              return item.value;\r\n            })\r\n            .sortBy(function(item) {\r\n              return item.Name;\r\n            })\r\n            .reverse()\r\n            .value();\r\n        });\r\n    }\r\n\r\n    function GetPList(id) {\r\n      return $resource(APP.Service + id)\r\n        .get()\r\n        .$promise\r\n        .then(function(data) {\r\n          return data;\r\n        });\r\n    }\r\n\r\n\r\n    function SavePList(PList) {\r\n\r\n      if (!PList._id) {\r\n        PList.Type = \"PList\";\r\n        PList.CreatedAt = new Date();\r\n      }\r\n\r\n      PList.Participants = _.filter(PList.Participants, function(item) {\r\n        return (item.Name || item.Email);\r\n      });\r\n\r\n      return $resource(APP.Service)\r\n        .save(PList)\r\n        .$promise\r\n        .then(function(data) {\r\n          return data;\r\n        });\r\n    }\r\n\r\n    function DeletePList(PList) {\r\n\r\n      PList._deleted = true;\r\n      PList.DeletedAt = new Date();\r\n\r\n      return $resource(APP.Service)\r\n        .save(PList)\r\n        .$promise;\r\n    }\r\n\r\n  }\r\n}());\r\n","(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.participants')\r\n    .run(appRun);\r\n\r\n  appRun.$inject = ['routerHelper'];\r\n\r\n  function appRun(routerHelper) {\r\n    routerHelper.configureStates(getStates());\r\n  }\r\n\r\n  function getStates() {\r\n    return [{\r\n      state: 'app.participants',\r\n      config: {\r\n        abstract: true,\r\n        template: '<ui-view/>',\r\n        data: {\r\n          permissions: {\r\n            except: ['Anonymous'],\r\n            redirectTo: \"auth.login\"\r\n          }\r\n        }\r\n      }\r\n    }, {\r\n      state: 'app.participants.overview',\r\n      config: {\r\n        url: '/participants',\r\n        controller: \"ParticipantsController\",\r\n        templateUrl: 'src/participants/overview/view.html',\r\n      }\r\n    }, {\r\n      state: 'app.participants.item',\r\n      config: {\r\n        url: '/participant/:ID',\r\n        controller: \"ParticipantController\",\r\n        templateUrl: 'src/participants/item/view.html',\r\n      }\r\n    }];\r\n  }\r\n\r\n}());\r\n","/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.participants')\r\n    .factory('ParticipantsModals', ParticipantsModals);\r\n\r\n  ParticipantsModals.$inject = ['modalHelper'];\r\n\r\n  function ParticipantsModals(modalHelper) {\r\n    return modalHelper.configureModals(getModals());\r\n\r\n    function getModals() {\r\n      return [{\r\n        modal: \"PListForm\",\r\n        config: {\r\n          templateUrl: 'src/participants/form/view.html',\r\n          controller: \"PListFormController\",\r\n          size: \"md\",\r\n          backdrop: 'static',\r\n        }\r\n      }];\r\n    }\r\n  }\r\n\r\n}());\r\n","/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.lotteries')\r\n    .factory('LotteriesService', LotteriesService);\r\n\r\n  /* @ngInject */\r\n  function LotteriesService($resource) {\r\n\r\n    var service = {\r\n      _total: null,\r\n      _limit: 10,\r\n      _offset: 0,\r\n      GetLotteries: GetLotteries,\r\n      GetLottery: GetLottery,\r\n      SaveLottery: SaveLottery,\r\n      DeleteLottery: DeleteLottery,\r\n      NextPage: NextPage,\r\n      PreviousPage: PreviousPage,\r\n      HasPages: HasPages,\r\n    }\r\n\r\n    return service;\r\n\r\n    function NextPage() {\r\n      service._offset = ((service._offset / service._limit) + 1) * service._limit;\r\n    }\r\n\r\n    function PreviousPage() {\r\n      service._offset = ((service._offset / service._limit) - 1) * service._limit;\r\n    }\r\n\r\n    function HasPages() {\r\n      return {\r\n        Previous: (service._offset !== 0),\r\n        Next: (service._total - service._offset > service._limit),\r\n      }\r\n    }\r\n\r\n    function GetLotteries() {\r\n\r\n      return $resource(APP.Service + \"_design/models/_view/lotteries\")\r\n        .get({\r\n          limit: service._limit,\r\n          skip: service._offset,\r\n        })\r\n        .$promise\r\n        .then(function(data) {\r\n          service._total = data.total_rows;\r\n          return _.chain(data.rows)\r\n            .map(function(item) {\r\n              return item.value;\r\n            })\r\n            .sortBy(function(item) {\r\n              return item.DrewAt || 0;\r\n            })\r\n            .reverse()\r\n            .value();\r\n        });\r\n    }\r\n\r\n\r\n    function GetLottery(id) {\r\n      return $resource(APP.Service + id)\r\n        .get()\r\n        .$promise\r\n        .then(function(data) {\r\n          return data;\r\n        });\r\n    }\r\n\r\n    function SaveLottery(lottery) {\r\n\r\n      lottery.Type = \"Lottery\";\r\n      lottery.DrewAt = new Date();\r\n      lottery.Participants = _.shuffle(lottery.Participants);\r\n\r\n      return $resource(APP.Service)\r\n        .save(lottery)\r\n        .$promise\r\n        .then(function(data) {\r\n          return data;\r\n        });\r\n    }\r\n\r\n    function DeleteLottery(lottery) {\r\n\r\n      lottery._deleted = true;\r\n      lottery.DeletedAt = new Date();\r\n\r\n      return $resource(APP.Service)\r\n        .save(lottery)\r\n        .$promise;\r\n    }\r\n\r\n  }\r\n}());\r\n","(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.lotteries')\r\n    .run(appRun);\r\n\r\n  appRun.$inject = ['routerHelper'];\r\n\r\n  function appRun(routerHelper) {\r\n    routerHelper.configureStates(getStates());\r\n  }\r\n\r\n  function getStates() {\r\n    return [{\r\n      state: 'app.lotteries',\r\n      config: {\r\n        abstract: true,\r\n        template: '<ui-view/>',\r\n        data: {\r\n          permissions: {\r\n            except: ['Anonymous'],\r\n            redirectTo: \"auth.login\"\r\n          }\r\n        }\r\n      }\r\n    }, {\r\n      state: 'app.lotteries.overview',\r\n      config: {\r\n        url: '/',\r\n        controller: \"LotteriesController\",\r\n        templateUrl: 'src/lotteries/overview/view.html',\r\n      }\r\n    }, {\r\n      state: 'app.lotteries.lottery',\r\n      config: {\r\n        url: '/lottery/:ID',\r\n        controller: \"LotteryController\",\r\n        templateUrl: 'src/lotteries/lottery/view.html',\r\n      }\r\n    }];\r\n  }\r\n\r\n}());\r\n","/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.lotteries')\r\n    .factory('LotteriesModals', LotteriesModals);\r\n\r\n  LotteriesModals.$inject = ['modalHelper'];\r\n\r\n  function LotteriesModals(modalHelper) {\r\n    return modalHelper.configureModals(getModals());\r\n\r\n    function getModals() {\r\n      return [{\r\n        modal: \"LotteryInit\",\r\n        config: {\r\n          templateUrl: 'src/lotteries/init/view.html',\r\n          controller: \"LotteryInitController\",\r\n          size: \"sm\"\r\n        }\r\n      }];\r\n    }\r\n  }\r\n\r\n}());\r\n","/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.auth')\r\n    .factory('AuthService', AuthService);\r\n\r\n  /* @ngInject */\r\n  function AuthService($http, $q, $cookies) {\r\n    var service = {\r\n      AuthObj: false,\r\n\r\n      Init: Init,\r\n      SignIn: SignIn,\r\n      SignOut: SignOut,\r\n    }\r\n\r\n    return service;\r\n\r\n    function Init() {\r\n\r\n      var AuthObj = $cookies.getObject('AuthObj');\r\n      if (AuthObj) {\r\n        service.isAuth = true;\r\n        service.AuthObj = AuthObj;\r\n      }\r\n\r\n    }\r\n\r\n    function SignIn(credentials) {\r\n\r\n      var deferred = $q.defer();\r\n\r\n      $http\r\n        .post(APP.CouchServer + '_session', {\r\n          name: credentials.username,\r\n          password: credentials.password,\r\n        }, {\r\n          IsSignIn: true\r\n        })\r\n        .then(function(response) {\r\n          var AuthObj = {\r\n            username: credentials.username\r\n          }\r\n          $cookies.putObject('AuthObj', AuthObj);\r\n          service.AuthObj = AuthObj;\r\n          deferred.resolve();\r\n        }, function(rejection) {\r\n          deferred.reject(rejection.data);\r\n        });\r\n\r\n      return deferred.promise;\r\n    }\r\n\r\n    function SignOut() {\r\n      $cookies.remove('AuthObj');\r\n      $http.delete(APP.CouchServer + '_session');\r\n      service.AuthObj = false;\r\n    }\r\n\r\n  }\r\n\r\n}());\r\n","/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.auth')\r\n    .run(appRun);\r\n\r\n  appRun.$inject = ['routerHelper'];\r\n\r\n  function appRun(routerHelper) {\r\n    routerHelper.configureStates(getStates());\r\n  }\r\n\r\n  function getStates() {\r\n    return [{\r\n      state: 'auth',\r\n      config: {\r\n        abstract: true,\r\n        template: '<ui-view/>',\r\n      }\r\n    }, {\r\n      state: 'auth.login',\r\n      config: {\r\n        url: '/login',\r\n        params: {\r\n          ref: null\r\n        },\r\n        templateUrl: \"src/auth/login/view.html\",\r\n        controller: \"AuthLoginController\",\r\n        data: {\r\n          permissions: {\r\n            only: ['Anonymous'],\r\n            redirectTo: \"app.lotteries.overview\"\r\n          }\r\n        }\r\n      }\r\n    }, {\r\n      state: 'auth.logout',\r\n      config: {\r\n        url: '/logout',\r\n        template: \"<ui-view/>\",\r\n        controller: function(AuthService, $state) {\r\n          AuthService.SignOut();\r\n          $state.go(\"auth.login\", {\r\n            ref: \"so\"\r\n          });\r\n        },\r\n      }\r\n    }];\r\n  }\r\n\r\n}());\r\n","/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.auth')\r\n    .config(AuthInterceptorConfig)\r\n    .factory('AuthInterceptor', AuthInterceptor);\r\n\r\n  /* @ngInject */\r\n  function AuthInterceptor($q, $injector,$cookies) {\r\n\r\n    return {\r\n      responseError: function(rejection) {\r\n        // console.log(rejection);\r\n        if (rejection.status === 401 && !rejection.config.IsSignIn) {\r\n          var AuthService = $injector.get('AuthService');\r\n          AuthService.SignOut();\r\n          var $state = $injector.get('$state');\r\n          $state.go('auth.login', {\r\n            ref: \"au\"\r\n          });\r\n        }\r\n        return $q.reject(rejection);\r\n      }\r\n    };\r\n\r\n  }\r\n\r\n  /* @ngInject */\r\n  function AuthInterceptorConfig($httpProvider) {\r\n    $httpProvider.interceptors.push(\"AuthInterceptor\");\r\n  }\r\n\r\n}());\r\n","(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app.auth')\r\n    .constant('LoginMessages', {\r\n      ANAUTHORIZED: {\r\n        Type: \"danger\",\r\n        Message: \"You were signed out\",\r\n        Details: \"Probably your session was timed out\",\r\n      },\r\n      SIGNOUT: {\r\n        Type: \"success\",\r\n        Message: \"You were signed out successfully\",\r\n        Details: \"You may login again using the form\",\r\n      },\r\n      REGISTERED: {\r\n        Type: \"success\",\r\n        Message: \"Your account is ready, you can login now\",\r\n        Details: false,\r\n      },\r\n      AUTHERROR: {\r\n        Type: \"danger\",\r\n        Message: \"Authentication Error\",\r\n        Details: null,\r\n      },\r\n      UNAVAILABLE: {\r\n        Type: \"danger\",\r\n        Message: \"Service is not available\",\r\n        Details: \"Please try again later. If the problem insist, contact your system administrator\",\r\n      },\r\n      UNAUTHORIZED: {\r\n        Type: \"danger\",\r\n        Message: \"Name or password is incorrect\",\r\n        Details: \"Please try again\",\r\n      },\r\n    });\r\n\r\n}());\r\n","(function() {\r\n  'use strict';\r\n\r\n  angular.module('app', [\r\n\r\n    'app.auth',\r\n    'app.lotteries',\r\n    'app.participants',\r\n    'app.settings',\r\n    'app._common',\r\n\r\n\r\n  ]);\r\n\r\n}());\r\n","/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app')\r\n    .run(appRun);\r\n\r\n  /* @ngInject */\r\n  function appRun($rootScope, $state, $stateParams, AuthService) {\r\n\r\n    AuthService.Init();\r\n\r\n    $rootScope.APP = APP;\r\n\r\n    $rootScope.$on('$stateChangeStart', function(evt, to, params) {\r\n\r\n      if (to.redirectTo) {\r\n        evt.preventDefault();\r\n        $state.go(to.redirectTo, params);\r\n      }\r\n    });\r\n\r\n\r\n  }\r\n\r\n}());\r\n","/* jshint -W097, -W033 */\r\n(function() {\r\n  'use strict';\r\n\r\n  var _domain = window.location.hostname.split(\".\").shift();\r\n  window.APP = {\r\n    Project: \"PicoLotteries\",\r\n    Version: \"0.1.5\",\r\n    Domain: _domain,\r\n    CouchServer: \"//localhost:5984/\",\r\n    Database: \"picolottery_\" + _domain,\r\n  };\r\n  window.APP.Service = window.APP.CouchServer + window.APP.Database + \"/\";\r\n\r\n  angular.element(document).ready(function() {\r\n    angular.bootstrap(document, [\"app\"]);\r\n  });\r\n\r\n})();\r\n"],"sourceRoot":"/source/"}